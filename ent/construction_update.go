// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lou-core/ent/city"
	"lou-core/ent/construction"
	"lou-core/ent/predicate"
	"lou-core/ent/queue"
	"lou-core/ent/user"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// ConstructionUpdate is the builder for updating Construction entities.
type ConstructionUpdate struct {
	config
	hooks      []Hook
	mutation   *ConstructionMutation
	predicates []predicate.Construction
}

// Where adds a new predicate for the builder.
func (cu *ConstructionUpdate) Where(ps ...predicate.Construction) *ConstructionUpdate {
	cu.predicates = append(cu.predicates, ps...)
	return cu
}

// SetX sets the x field.
func (cu *ConstructionUpdate) SetX(i int) *ConstructionUpdate {
	cu.mutation.ResetX()
	cu.mutation.SetX(i)
	return cu
}

// AddX adds i to x.
func (cu *ConstructionUpdate) AddX(i int) *ConstructionUpdate {
	cu.mutation.AddX(i)
	return cu
}

// SetY sets the y field.
func (cu *ConstructionUpdate) SetY(i int) *ConstructionUpdate {
	cu.mutation.ResetY()
	cu.mutation.SetY(i)
	return cu
}

// AddY adds i to y.
func (cu *ConstructionUpdate) AddY(i int) *ConstructionUpdate {
	cu.mutation.AddY(i)
	return cu
}

// SetRawProduction sets the raw_production field.
func (cu *ConstructionUpdate) SetRawProduction(i int) *ConstructionUpdate {
	cu.mutation.ResetRawProduction()
	cu.mutation.SetRawProduction(i)
	return cu
}

// SetNillableRawProduction sets the raw_production field if the given value is not nil.
func (cu *ConstructionUpdate) SetNillableRawProduction(i *int) *ConstructionUpdate {
	if i != nil {
		cu.SetRawProduction(*i)
	}
	return cu
}

// AddRawProduction adds i to raw_production.
func (cu *ConstructionUpdate) AddRawProduction(i int) *ConstructionUpdate {
	cu.mutation.AddRawProduction(i)
	return cu
}

// SetType sets the type field.
func (cu *ConstructionUpdate) SetType(i int) *ConstructionUpdate {
	cu.mutation.ResetType()
	cu.mutation.SetType(i)
	return cu
}

// SetNillableType sets the type field if the given value is not nil.
func (cu *ConstructionUpdate) SetNillableType(i *int) *ConstructionUpdate {
	if i != nil {
		cu.SetType(*i)
	}
	return cu
}

// AddType adds i to type.
func (cu *ConstructionUpdate) AddType(i int) *ConstructionUpdate {
	cu.mutation.AddType(i)
	return cu
}

// SetLevel sets the level field.
func (cu *ConstructionUpdate) SetLevel(i int) *ConstructionUpdate {
	cu.mutation.ResetLevel()
	cu.mutation.SetLevel(i)
	return cu
}

// SetNillableLevel sets the level field if the given value is not nil.
func (cu *ConstructionUpdate) SetNillableLevel(i *int) *ConstructionUpdate {
	if i != nil {
		cu.SetLevel(*i)
	}
	return cu
}

// AddLevel adds i to level.
func (cu *ConstructionUpdate) AddLevel(i int) *ConstructionUpdate {
	cu.mutation.AddLevel(i)
	return cu
}

// SetModifier sets the modifier field.
func (cu *ConstructionUpdate) SetModifier(f float64) *ConstructionUpdate {
	cu.mutation.ResetModifier()
	cu.mutation.SetModifier(f)
	return cu
}

// SetNillableModifier sets the modifier field if the given value is not nil.
func (cu *ConstructionUpdate) SetNillableModifier(f *float64) *ConstructionUpdate {
	if f != nil {
		cu.SetModifier(*f)
	}
	return cu
}

// AddModifier adds f to modifier.
func (cu *ConstructionUpdate) AddModifier(f float64) *ConstructionUpdate {
	cu.mutation.AddModifier(f)
	return cu
}

// SetNeedRefresh sets the need_refresh field.
func (cu *ConstructionUpdate) SetNeedRefresh(b bool) *ConstructionUpdate {
	cu.mutation.SetNeedRefresh(b)
	return cu
}

// SetNillableNeedRefresh sets the need_refresh field if the given value is not nil.
func (cu *ConstructionUpdate) SetNillableNeedRefresh(b *bool) *ConstructionUpdate {
	if b != nil {
		cu.SetNeedRefresh(*b)
	}
	return cu
}

// SetCityID sets the city edge to City by id.
func (cu *ConstructionUpdate) SetCityID(id int) *ConstructionUpdate {
	cu.mutation.SetCityID(id)
	return cu
}

// SetCity sets the city edge to City.
func (cu *ConstructionUpdate) SetCity(c *City) *ConstructionUpdate {
	return cu.SetCityID(c.ID)
}

// SetOwnerID sets the owner edge to User by id.
func (cu *ConstructionUpdate) SetOwnerID(id int) *ConstructionUpdate {
	cu.mutation.SetOwnerID(id)
	return cu
}

// SetNillableOwnerID sets the owner edge to User by id if the given value is not nil.
func (cu *ConstructionUpdate) SetNillableOwnerID(id *int) *ConstructionUpdate {
	if id != nil {
		cu = cu.SetOwnerID(*id)
	}
	return cu
}

// SetOwner sets the owner edge to User.
func (cu *ConstructionUpdate) SetOwner(u *User) *ConstructionUpdate {
	return cu.SetOwnerID(u.ID)
}

// AddQueueIDs adds the queue edge to Queue by ids.
func (cu *ConstructionUpdate) AddQueueIDs(ids ...int) *ConstructionUpdate {
	cu.mutation.AddQueueIDs(ids...)
	return cu
}

// AddQueue adds the queue edges to Queue.
func (cu *ConstructionUpdate) AddQueue(q ...*Queue) *ConstructionUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return cu.AddQueueIDs(ids...)
}

// ClearCity clears the city edge to City.
func (cu *ConstructionUpdate) ClearCity() *ConstructionUpdate {
	cu.mutation.ClearCity()
	return cu
}

// ClearOwner clears the owner edge to User.
func (cu *ConstructionUpdate) ClearOwner() *ConstructionUpdate {
	cu.mutation.ClearOwner()
	return cu
}

// RemoveQueueIDs removes the queue edge to Queue by ids.
func (cu *ConstructionUpdate) RemoveQueueIDs(ids ...int) *ConstructionUpdate {
	cu.mutation.RemoveQueueIDs(ids...)
	return cu
}

// RemoveQueue removes queue edges to Queue.
func (cu *ConstructionUpdate) RemoveQueue(q ...*Queue) *ConstructionUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return cu.RemoveQueueIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (cu *ConstructionUpdate) Save(ctx context.Context) (int, error) {

	if _, ok := cu.mutation.CityID(); cu.mutation.CityCleared() && !ok {
		return 0, errors.New("ent: clearing a unique edge \"city\"")
	}

	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ConstructionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ConstructionUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ConstructionUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ConstructionUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *ConstructionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   construction.Table,
			Columns: construction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: construction.FieldID,
			},
		},
	}
	if ps := cu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.X(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: construction.FieldX,
		})
	}
	if value, ok := cu.mutation.AddedX(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: construction.FieldX,
		})
	}
	if value, ok := cu.mutation.Y(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: construction.FieldY,
		})
	}
	if value, ok := cu.mutation.AddedY(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: construction.FieldY,
		})
	}
	if value, ok := cu.mutation.RawProduction(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: construction.FieldRawProduction,
		})
	}
	if value, ok := cu.mutation.AddedRawProduction(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: construction.FieldRawProduction,
		})
	}
	if value, ok := cu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: construction.FieldType,
		})
	}
	if value, ok := cu.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: construction.FieldType,
		})
	}
	if value, ok := cu.mutation.Level(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: construction.FieldLevel,
		})
	}
	if value, ok := cu.mutation.AddedLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: construction.FieldLevel,
		})
	}
	if value, ok := cu.mutation.Modifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: construction.FieldModifier,
		})
	}
	if value, ok := cu.mutation.AddedModifier(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: construction.FieldModifier,
		})
	}
	if value, ok := cu.mutation.NeedRefresh(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: construction.FieldNeedRefresh,
		})
	}
	if cu.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   construction.CityTable,
			Columns: []string{construction.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   construction.CityTable,
			Columns: []string{construction.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   construction.OwnerTable,
			Columns: []string{construction.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   construction.OwnerTable,
			Columns: []string{construction.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := cu.mutation.RemovedQueueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   construction.QueueTable,
			Columns: []string{construction.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: queue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.QueueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   construction.QueueTable,
			Columns: []string{construction.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: queue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{construction.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ConstructionUpdateOne is the builder for updating a single Construction entity.
type ConstructionUpdateOne struct {
	config
	hooks    []Hook
	mutation *ConstructionMutation
}

// SetX sets the x field.
func (cuo *ConstructionUpdateOne) SetX(i int) *ConstructionUpdateOne {
	cuo.mutation.ResetX()
	cuo.mutation.SetX(i)
	return cuo
}

// AddX adds i to x.
func (cuo *ConstructionUpdateOne) AddX(i int) *ConstructionUpdateOne {
	cuo.mutation.AddX(i)
	return cuo
}

// SetY sets the y field.
func (cuo *ConstructionUpdateOne) SetY(i int) *ConstructionUpdateOne {
	cuo.mutation.ResetY()
	cuo.mutation.SetY(i)
	return cuo
}

// AddY adds i to y.
func (cuo *ConstructionUpdateOne) AddY(i int) *ConstructionUpdateOne {
	cuo.mutation.AddY(i)
	return cuo
}

// SetRawProduction sets the raw_production field.
func (cuo *ConstructionUpdateOne) SetRawProduction(i int) *ConstructionUpdateOne {
	cuo.mutation.ResetRawProduction()
	cuo.mutation.SetRawProduction(i)
	return cuo
}

// SetNillableRawProduction sets the raw_production field if the given value is not nil.
func (cuo *ConstructionUpdateOne) SetNillableRawProduction(i *int) *ConstructionUpdateOne {
	if i != nil {
		cuo.SetRawProduction(*i)
	}
	return cuo
}

// AddRawProduction adds i to raw_production.
func (cuo *ConstructionUpdateOne) AddRawProduction(i int) *ConstructionUpdateOne {
	cuo.mutation.AddRawProduction(i)
	return cuo
}

// SetType sets the type field.
func (cuo *ConstructionUpdateOne) SetType(i int) *ConstructionUpdateOne {
	cuo.mutation.ResetType()
	cuo.mutation.SetType(i)
	return cuo
}

// SetNillableType sets the type field if the given value is not nil.
func (cuo *ConstructionUpdateOne) SetNillableType(i *int) *ConstructionUpdateOne {
	if i != nil {
		cuo.SetType(*i)
	}
	return cuo
}

// AddType adds i to type.
func (cuo *ConstructionUpdateOne) AddType(i int) *ConstructionUpdateOne {
	cuo.mutation.AddType(i)
	return cuo
}

// SetLevel sets the level field.
func (cuo *ConstructionUpdateOne) SetLevel(i int) *ConstructionUpdateOne {
	cuo.mutation.ResetLevel()
	cuo.mutation.SetLevel(i)
	return cuo
}

// SetNillableLevel sets the level field if the given value is not nil.
func (cuo *ConstructionUpdateOne) SetNillableLevel(i *int) *ConstructionUpdateOne {
	if i != nil {
		cuo.SetLevel(*i)
	}
	return cuo
}

// AddLevel adds i to level.
func (cuo *ConstructionUpdateOne) AddLevel(i int) *ConstructionUpdateOne {
	cuo.mutation.AddLevel(i)
	return cuo
}

// SetModifier sets the modifier field.
func (cuo *ConstructionUpdateOne) SetModifier(f float64) *ConstructionUpdateOne {
	cuo.mutation.ResetModifier()
	cuo.mutation.SetModifier(f)
	return cuo
}

// SetNillableModifier sets the modifier field if the given value is not nil.
func (cuo *ConstructionUpdateOne) SetNillableModifier(f *float64) *ConstructionUpdateOne {
	if f != nil {
		cuo.SetModifier(*f)
	}
	return cuo
}

// AddModifier adds f to modifier.
func (cuo *ConstructionUpdateOne) AddModifier(f float64) *ConstructionUpdateOne {
	cuo.mutation.AddModifier(f)
	return cuo
}

// SetNeedRefresh sets the need_refresh field.
func (cuo *ConstructionUpdateOne) SetNeedRefresh(b bool) *ConstructionUpdateOne {
	cuo.mutation.SetNeedRefresh(b)
	return cuo
}

// SetNillableNeedRefresh sets the need_refresh field if the given value is not nil.
func (cuo *ConstructionUpdateOne) SetNillableNeedRefresh(b *bool) *ConstructionUpdateOne {
	if b != nil {
		cuo.SetNeedRefresh(*b)
	}
	return cuo
}

// SetCityID sets the city edge to City by id.
func (cuo *ConstructionUpdateOne) SetCityID(id int) *ConstructionUpdateOne {
	cuo.mutation.SetCityID(id)
	return cuo
}

// SetCity sets the city edge to City.
func (cuo *ConstructionUpdateOne) SetCity(c *City) *ConstructionUpdateOne {
	return cuo.SetCityID(c.ID)
}

// SetOwnerID sets the owner edge to User by id.
func (cuo *ConstructionUpdateOne) SetOwnerID(id int) *ConstructionUpdateOne {
	cuo.mutation.SetOwnerID(id)
	return cuo
}

// SetNillableOwnerID sets the owner edge to User by id if the given value is not nil.
func (cuo *ConstructionUpdateOne) SetNillableOwnerID(id *int) *ConstructionUpdateOne {
	if id != nil {
		cuo = cuo.SetOwnerID(*id)
	}
	return cuo
}

// SetOwner sets the owner edge to User.
func (cuo *ConstructionUpdateOne) SetOwner(u *User) *ConstructionUpdateOne {
	return cuo.SetOwnerID(u.ID)
}

// AddQueueIDs adds the queue edge to Queue by ids.
func (cuo *ConstructionUpdateOne) AddQueueIDs(ids ...int) *ConstructionUpdateOne {
	cuo.mutation.AddQueueIDs(ids...)
	return cuo
}

// AddQueue adds the queue edges to Queue.
func (cuo *ConstructionUpdateOne) AddQueue(q ...*Queue) *ConstructionUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return cuo.AddQueueIDs(ids...)
}

// ClearCity clears the city edge to City.
func (cuo *ConstructionUpdateOne) ClearCity() *ConstructionUpdateOne {
	cuo.mutation.ClearCity()
	return cuo
}

// ClearOwner clears the owner edge to User.
func (cuo *ConstructionUpdateOne) ClearOwner() *ConstructionUpdateOne {
	cuo.mutation.ClearOwner()
	return cuo
}

// RemoveQueueIDs removes the queue edge to Queue by ids.
func (cuo *ConstructionUpdateOne) RemoveQueueIDs(ids ...int) *ConstructionUpdateOne {
	cuo.mutation.RemoveQueueIDs(ids...)
	return cuo
}

// RemoveQueue removes queue edges to Queue.
func (cuo *ConstructionUpdateOne) RemoveQueue(q ...*Queue) *ConstructionUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return cuo.RemoveQueueIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (cuo *ConstructionUpdateOne) Save(ctx context.Context) (*Construction, error) {

	if _, ok := cuo.mutation.CityID(); cuo.mutation.CityCleared() && !ok {
		return nil, errors.New("ent: clearing a unique edge \"city\"")
	}

	var (
		err  error
		node *Construction
	)
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ConstructionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ConstructionUpdateOne) SaveX(ctx context.Context) *Construction {
	c, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return c
}

// Exec executes the query on the entity.
func (cuo *ConstructionUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ConstructionUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *ConstructionUpdateOne) sqlSave(ctx context.Context) (c *Construction, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   construction.Table,
			Columns: construction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: construction.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, fmt.Errorf("missing Construction.ID for update")
	}
	_spec.Node.ID.Value = id
	if value, ok := cuo.mutation.X(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: construction.FieldX,
		})
	}
	if value, ok := cuo.mutation.AddedX(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: construction.FieldX,
		})
	}
	if value, ok := cuo.mutation.Y(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: construction.FieldY,
		})
	}
	if value, ok := cuo.mutation.AddedY(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: construction.FieldY,
		})
	}
	if value, ok := cuo.mutation.RawProduction(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: construction.FieldRawProduction,
		})
	}
	if value, ok := cuo.mutation.AddedRawProduction(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: construction.FieldRawProduction,
		})
	}
	if value, ok := cuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: construction.FieldType,
		})
	}
	if value, ok := cuo.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: construction.FieldType,
		})
	}
	if value, ok := cuo.mutation.Level(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: construction.FieldLevel,
		})
	}
	if value, ok := cuo.mutation.AddedLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: construction.FieldLevel,
		})
	}
	if value, ok := cuo.mutation.Modifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: construction.FieldModifier,
		})
	}
	if value, ok := cuo.mutation.AddedModifier(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: construction.FieldModifier,
		})
	}
	if value, ok := cuo.mutation.NeedRefresh(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: construction.FieldNeedRefresh,
		})
	}
	if cuo.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   construction.CityTable,
			Columns: []string{construction.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   construction.CityTable,
			Columns: []string{construction.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   construction.OwnerTable,
			Columns: []string{construction.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   construction.OwnerTable,
			Columns: []string{construction.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := cuo.mutation.RemovedQueueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   construction.QueueTable,
			Columns: []string{construction.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: queue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.QueueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   construction.QueueTable,
			Columns: []string{construction.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: queue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	c = &Construction{config: cuo.config}
	_spec.Assign = c.assignValues
	_spec.ScanValues = c.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{construction.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return c, nil
}
