// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/joaopedrosgs/loucore/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// PasswordHash holds the value of the "password_hash" field.
	PasswordHash string `json:"password_hash,omitempty"`
	// Gold holds the value of the "gold" field.
	Gold int `json:"gold,omitempty"`
	// Diamonds holds the value of the "diamonds" field.
	Diamonds int `json:"diamonds,omitempty"`
	// Darkwood holds the value of the "darkwood" field.
	Darkwood int `json:"darkwood,omitempty"`
	// Runestone holds the value of the "runestone" field.
	Runestone int `json:"runestone,omitempty"`
	// Veritium holds the value of the "veritium" field.
	Veritium int `json:"veritium,omitempty"`
	// Trueseed holds the value of the "trueseed" field.
	Trueseed int `json:"trueseed,omitempty"`
	// Rank holds the value of the "rank" field.
	Rank int `json:"rank,omitempty"`
	// AllianceRank holds the value of the "alliance_rank" field.
	AllianceRank int `json:"alliance_rank,omitempty"`
	// LastUpdated holds the value of the "last_updated" field.
	LastUpdated time.Time `json:"last_updated,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges UserEdges `json:"edges"`
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Cities holds the value of the cities edge.
	Cities []*City
	// Queue holds the value of the queue edge.
	Queue []*QueueItem
	// Constructions holds the value of the constructions edge.
	Constructions []*Construction
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CitiesOrErr returns the Cities value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CitiesOrErr() ([]*City, error) {
	if e.loadedTypes[0] {
		return e.Cities, nil
	}
	return nil, &NotLoadedError{edge: "cities"}
}

// QueueOrErr returns the Queue value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) QueueOrErr() ([]*QueueItem, error) {
	if e.loadedTypes[1] {
		return e.Queue, nil
	}
	return nil, &NotLoadedError{edge: "queue"}
}

// ConstructionsOrErr returns the Constructions value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ConstructionsOrErr() ([]*Construction, error) {
	if e.loadedTypes[2] {
		return e.Constructions, nil
	}
	return nil, &NotLoadedError{edge: "constructions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullString{}, // email
		&sql.NullString{}, // password_hash
		&sql.NullInt64{},  // gold
		&sql.NullInt64{},  // diamonds
		&sql.NullInt64{},  // darkwood
		&sql.NullInt64{},  // runestone
		&sql.NullInt64{},  // veritium
		&sql.NullInt64{},  // trueseed
		&sql.NullInt64{},  // rank
		&sql.NullInt64{},  // alliance_rank
		&sql.NullTime{},   // last_updated
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(values ...interface{}) error {
	if m, n := len(values), len(user.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	u.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		u.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field email", values[1])
	} else if value.Valid {
		u.Email = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field password_hash", values[2])
	} else if value.Valid {
		u.PasswordHash = value.String
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field gold", values[3])
	} else if value.Valid {
		u.Gold = int(value.Int64)
	}
	if value, ok := values[4].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field diamonds", values[4])
	} else if value.Valid {
		u.Diamonds = int(value.Int64)
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field darkwood", values[5])
	} else if value.Valid {
		u.Darkwood = int(value.Int64)
	}
	if value, ok := values[6].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field runestone", values[6])
	} else if value.Valid {
		u.Runestone = int(value.Int64)
	}
	if value, ok := values[7].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field veritium", values[7])
	} else if value.Valid {
		u.Veritium = int(value.Int64)
	}
	if value, ok := values[8].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field trueseed", values[8])
	} else if value.Valid {
		u.Trueseed = int(value.Int64)
	}
	if value, ok := values[9].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field rank", values[9])
	} else if value.Valid {
		u.Rank = int(value.Int64)
	}
	if value, ok := values[10].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field alliance_rank", values[10])
	} else if value.Valid {
		u.AllianceRank = int(value.Int64)
	}
	if value, ok := values[11].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field last_updated", values[11])
	} else if value.Valid {
		u.LastUpdated = value.Time
	}
	return nil
}

// QueryCities queries the cities edge of the User.
func (u *User) QueryCities() *CityQuery {
	return (&UserClient{config: u.config}).QueryCities(u)
}

// QueryQueue queries the queue edge of the User.
func (u *User) QueryQueue() *QueueItemQuery {
	return (&UserClient{config: u.config}).QueryQueue(u)
}

// QueryConstructions queries the constructions edge of the User.
func (u *User) QueryConstructions() *ConstructionQuery {
	return (&UserClient{config: u.config}).QueryConstructions(u)
}

// Update returns a builder for updating this User.
// Note that, you need to call User.Unwrap() before calling this method, if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", name=")
	builder.WriteString(u.Name)
	builder.WriteString(", email=")
	builder.WriteString(u.Email)
	builder.WriteString(", password_hash=")
	builder.WriteString(u.PasswordHash)
	builder.WriteString(", gold=")
	builder.WriteString(fmt.Sprintf("%v", u.Gold))
	builder.WriteString(", diamonds=")
	builder.WriteString(fmt.Sprintf("%v", u.Diamonds))
	builder.WriteString(", darkwood=")
	builder.WriteString(fmt.Sprintf("%v", u.Darkwood))
	builder.WriteString(", runestone=")
	builder.WriteString(fmt.Sprintf("%v", u.Runestone))
	builder.WriteString(", veritium=")
	builder.WriteString(fmt.Sprintf("%v", u.Veritium))
	builder.WriteString(", trueseed=")
	builder.WriteString(fmt.Sprintf("%v", u.Trueseed))
	builder.WriteString(", rank=")
	builder.WriteString(fmt.Sprintf("%v", u.Rank))
	builder.WriteString(", alliance_rank=")
	builder.WriteString(fmt.Sprintf("%v", u.AllianceRank))
	builder.WriteString(", last_updated=")
	builder.WriteString(u.LastUpdated.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
