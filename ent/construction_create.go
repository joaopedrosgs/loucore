// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lou-core/ent/city"
	"lou-core/ent/construction"
	"lou-core/ent/queue"
	"lou-core/ent/user"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// ConstructionCreate is the builder for creating a Construction entity.
type ConstructionCreate struct {
	config
	mutation *ConstructionMutation
	hooks    []Hook
}

// SetX sets the x field.
func (cc *ConstructionCreate) SetX(i int) *ConstructionCreate {
	cc.mutation.SetX(i)
	return cc
}

// SetY sets the y field.
func (cc *ConstructionCreate) SetY(i int) *ConstructionCreate {
	cc.mutation.SetY(i)
	return cc
}

// SetRawProduction sets the raw_production field.
func (cc *ConstructionCreate) SetRawProduction(i int) *ConstructionCreate {
	cc.mutation.SetRawProduction(i)
	return cc
}

// SetNillableRawProduction sets the raw_production field if the given value is not nil.
func (cc *ConstructionCreate) SetNillableRawProduction(i *int) *ConstructionCreate {
	if i != nil {
		cc.SetRawProduction(*i)
	}
	return cc
}

// SetType sets the type field.
func (cc *ConstructionCreate) SetType(i int) *ConstructionCreate {
	cc.mutation.SetType(i)
	return cc
}

// SetNillableType sets the type field if the given value is not nil.
func (cc *ConstructionCreate) SetNillableType(i *int) *ConstructionCreate {
	if i != nil {
		cc.SetType(*i)
	}
	return cc
}

// SetLevel sets the level field.
func (cc *ConstructionCreate) SetLevel(i int) *ConstructionCreate {
	cc.mutation.SetLevel(i)
	return cc
}

// SetNillableLevel sets the level field if the given value is not nil.
func (cc *ConstructionCreate) SetNillableLevel(i *int) *ConstructionCreate {
	if i != nil {
		cc.SetLevel(*i)
	}
	return cc
}

// SetModifier sets the modifier field.
func (cc *ConstructionCreate) SetModifier(f float64) *ConstructionCreate {
	cc.mutation.SetModifier(f)
	return cc
}

// SetNillableModifier sets the modifier field if the given value is not nil.
func (cc *ConstructionCreate) SetNillableModifier(f *float64) *ConstructionCreate {
	if f != nil {
		cc.SetModifier(*f)
	}
	return cc
}

// SetNeedRefresh sets the need_refresh field.
func (cc *ConstructionCreate) SetNeedRefresh(b bool) *ConstructionCreate {
	cc.mutation.SetNeedRefresh(b)
	return cc
}

// SetNillableNeedRefresh sets the need_refresh field if the given value is not nil.
func (cc *ConstructionCreate) SetNillableNeedRefresh(b *bool) *ConstructionCreate {
	if b != nil {
		cc.SetNeedRefresh(*b)
	}
	return cc
}

// SetCityID sets the city edge to City by id.
func (cc *ConstructionCreate) SetCityID(id int) *ConstructionCreate {
	cc.mutation.SetCityID(id)
	return cc
}

// SetCity sets the city edge to City.
func (cc *ConstructionCreate) SetCity(c *City) *ConstructionCreate {
	return cc.SetCityID(c.ID)
}

// SetOwnerID sets the owner edge to User by id.
func (cc *ConstructionCreate) SetOwnerID(id int) *ConstructionCreate {
	cc.mutation.SetOwnerID(id)
	return cc
}

// SetNillableOwnerID sets the owner edge to User by id if the given value is not nil.
func (cc *ConstructionCreate) SetNillableOwnerID(id *int) *ConstructionCreate {
	if id != nil {
		cc = cc.SetOwnerID(*id)
	}
	return cc
}

// SetOwner sets the owner edge to User.
func (cc *ConstructionCreate) SetOwner(u *User) *ConstructionCreate {
	return cc.SetOwnerID(u.ID)
}

// AddQueueIDs adds the queue edge to Queue by ids.
func (cc *ConstructionCreate) AddQueueIDs(ids ...int) *ConstructionCreate {
	cc.mutation.AddQueueIDs(ids...)
	return cc
}

// AddQueue adds the queue edges to Queue.
func (cc *ConstructionCreate) AddQueue(q ...*Queue) *ConstructionCreate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return cc.AddQueueIDs(ids...)
}

// Save creates the Construction in the database.
func (cc *ConstructionCreate) Save(ctx context.Context) (*Construction, error) {
	if _, ok := cc.mutation.X(); !ok {
		return nil, errors.New("ent: missing required field \"x\"")
	}
	if _, ok := cc.mutation.Y(); !ok {
		return nil, errors.New("ent: missing required field \"y\"")
	}
	if _, ok := cc.mutation.RawProduction(); !ok {
		v := construction.DefaultRawProduction
		cc.mutation.SetRawProduction(v)
	}
	if _, ok := cc.mutation.GetType(); !ok {
		v := construction.DefaultType
		cc.mutation.SetType(v)
	}
	if _, ok := cc.mutation.Level(); !ok {
		v := construction.DefaultLevel
		cc.mutation.SetLevel(v)
	}
	if _, ok := cc.mutation.Modifier(); !ok {
		v := construction.DefaultModifier
		cc.mutation.SetModifier(v)
	}
	if _, ok := cc.mutation.NeedRefresh(); !ok {
		v := construction.DefaultNeedRefresh
		cc.mutation.SetNeedRefresh(v)
	}
	if _, ok := cc.mutation.CityID(); !ok {
		return nil, errors.New("ent: missing required edge \"city\"")
	}
	var (
		err  error
		node *Construction
	)
	if len(cc.hooks) == 0 {
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ConstructionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cc.mutation = mutation
			node, err = cc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ConstructionCreate) SaveX(ctx context.Context) *Construction {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cc *ConstructionCreate) sqlSave(ctx context.Context) (*Construction, error) {
	var (
		c     = &Construction{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: construction.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: construction.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.X(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: construction.FieldX,
		})
		c.X = value
	}
	if value, ok := cc.mutation.Y(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: construction.FieldY,
		})
		c.Y = value
	}
	if value, ok := cc.mutation.RawProduction(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: construction.FieldRawProduction,
		})
		c.RawProduction = value
	}
	if value, ok := cc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: construction.FieldType,
		})
		c.Type = value
	}
	if value, ok := cc.mutation.Level(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: construction.FieldLevel,
		})
		c.Level = value
	}
	if value, ok := cc.mutation.Modifier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: construction.FieldModifier,
		})
		c.Modifier = value
	}
	if value, ok := cc.mutation.NeedRefresh(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: construction.FieldNeedRefresh,
		})
		c.NeedRefresh = value
	}
	if nodes := cc.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   construction.CityTable,
			Columns: []string{construction.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   construction.OwnerTable,
			Columns: []string{construction.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.QueueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   construction.QueueTable,
			Columns: []string{construction.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: queue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	c.ID = int(id)
	return c, nil
}
