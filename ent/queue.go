// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"lou-core/ent/city"
	"lou-core/ent/construction"
	"lou-core/ent/queue"
	"lou-core/ent/user"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
)

// Queue is the model entity for the Queue schema.
type Queue struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Completion holds the value of the "completion" field.
	Completion time.Time `json:"completion,omitempty"`
	// Action holds the value of the "action" field.
	Action int `json:"action,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QueueQuery when eager-loading is set.
	Edges              QueueEdges `json:"edges"`
	city_queue         *int
	construction_queue *int
	user_queue         *int
}

// QueueEdges holds the relations/edges for other nodes in the graph.
type QueueEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User
	// City holds the value of the city edge.
	City *City
	// Construction holds the value of the construction edge.
	Construction *Construction
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QueueEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// The edge owner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// CityOrErr returns the City value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QueueEdges) CityOrErr() (*City, error) {
	if e.loadedTypes[1] {
		if e.City == nil {
			// The edge city was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: city.Label}
		}
		return e.City, nil
	}
	return nil, &NotLoadedError{edge: "city"}
}

// ConstructionOrErr returns the Construction value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QueueEdges) ConstructionOrErr() (*Construction, error) {
	if e.loadedTypes[2] {
		if e.Construction == nil {
			// The edge construction was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: construction.Label}
		}
		return e.Construction, nil
	}
	return nil, &NotLoadedError{edge: "construction"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Queue) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullTime{},  // completion
		&sql.NullInt64{}, // action
		&sql.NullInt64{}, // order
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Queue) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // city_queue
		&sql.NullInt64{}, // construction_queue
		&sql.NullInt64{}, // user_queue
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Queue fields.
func (q *Queue) assignValues(values ...interface{}) error {
	if m, n := len(values), len(queue.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	q.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field completion", values[0])
	} else if value.Valid {
		q.Completion = value.Time
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field action", values[1])
	} else if value.Valid {
		q.Action = int(value.Int64)
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field order", values[2])
	} else if value.Valid {
		q.Order = int(value.Int64)
	}
	values = values[3:]
	if len(values) == len(queue.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field city_queue", value)
		} else if value.Valid {
			q.city_queue = new(int)
			*q.city_queue = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field construction_queue", value)
		} else if value.Valid {
			q.construction_queue = new(int)
			*q.construction_queue = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_queue", value)
		} else if value.Valid {
			q.user_queue = new(int)
			*q.user_queue = int(value.Int64)
		}
	}
	return nil
}

// QueryOwner queries the owner edge of the Queue.
func (q *Queue) QueryOwner() *UserQuery {
	return (&QueueClient{config: q.config}).QueryOwner(q)
}

// QueryCity queries the city edge of the Queue.
func (q *Queue) QueryCity() *CityQuery {
	return (&QueueClient{config: q.config}).QueryCity(q)
}

// QueryConstruction queries the construction edge of the Queue.
func (q *Queue) QueryConstruction() *ConstructionQuery {
	return (&QueueClient{config: q.config}).QueryConstruction(q)
}

// Update returns a builder for updating this Queue.
// Note that, you need to call Queue.Unwrap() before calling this method, if this Queue
// was returned from a transaction, and the transaction was committed or rolled back.
func (q *Queue) Update() *QueueUpdateOne {
	return (&QueueClient{config: q.config}).UpdateOne(q)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (q *Queue) Unwrap() *Queue {
	tx, ok := q.config.driver.(*txDriver)
	if !ok {
		panic("ent: Queue is not a transactional entity")
	}
	q.config.driver = tx.drv
	return q
}

// String implements the fmt.Stringer.
func (q *Queue) String() string {
	var builder strings.Builder
	builder.WriteString("Queue(")
	builder.WriteString(fmt.Sprintf("id=%v", q.ID))
	builder.WriteString(", completion=")
	builder.WriteString(q.Completion.Format(time.ANSIC))
	builder.WriteString(", action=")
	builder.WriteString(fmt.Sprintf("%v", q.Action))
	builder.WriteString(", order=")
	builder.WriteString(fmt.Sprintf("%v", q.Order))
	builder.WriteByte(')')
	return builder.String()
}

// Queues is a parsable slice of Queue.
type Queues []*Queue

func (q Queues) config(cfg config) {
	for _i := range q {
		q[_i].config = cfg
	}
}
