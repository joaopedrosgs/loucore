// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"lou-core/ent/city"
	"lou-core/ent/construction"
	"lou-core/ent/predicate"
	"lou-core/ent/queue"
	"lou-core/ent/user"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// QueueUpdate is the builder for updating Queue entities.
type QueueUpdate struct {
	config
	hooks      []Hook
	mutation   *QueueMutation
	predicates []predicate.Queue
}

// Where adds a new predicate for the builder.
func (qu *QueueUpdate) Where(ps ...predicate.Queue) *QueueUpdate {
	qu.predicates = append(qu.predicates, ps...)
	return qu
}

// SetCompletion sets the completion field.
func (qu *QueueUpdate) SetCompletion(t time.Time) *QueueUpdate {
	qu.mutation.SetCompletion(t)
	return qu
}

// SetAction sets the action field.
func (qu *QueueUpdate) SetAction(i int) *QueueUpdate {
	qu.mutation.ResetAction()
	qu.mutation.SetAction(i)
	return qu
}

// AddAction adds i to action.
func (qu *QueueUpdate) AddAction(i int) *QueueUpdate {
	qu.mutation.AddAction(i)
	return qu
}

// SetOrder sets the order field.
func (qu *QueueUpdate) SetOrder(i int) *QueueUpdate {
	qu.mutation.ResetOrder()
	qu.mutation.SetOrder(i)
	return qu
}

// AddOrder adds i to order.
func (qu *QueueUpdate) AddOrder(i int) *QueueUpdate {
	qu.mutation.AddOrder(i)
	return qu
}

// SetOwnerID sets the owner edge to User by id.
func (qu *QueueUpdate) SetOwnerID(id int) *QueueUpdate {
	qu.mutation.SetOwnerID(id)
	return qu
}

// SetNillableOwnerID sets the owner edge to User by id if the given value is not nil.
func (qu *QueueUpdate) SetNillableOwnerID(id *int) *QueueUpdate {
	if id != nil {
		qu = qu.SetOwnerID(*id)
	}
	return qu
}

// SetOwner sets the owner edge to User.
func (qu *QueueUpdate) SetOwner(u *User) *QueueUpdate {
	return qu.SetOwnerID(u.ID)
}

// SetCityID sets the city edge to City by id.
func (qu *QueueUpdate) SetCityID(id int) *QueueUpdate {
	qu.mutation.SetCityID(id)
	return qu
}

// SetNillableCityID sets the city edge to City by id if the given value is not nil.
func (qu *QueueUpdate) SetNillableCityID(id *int) *QueueUpdate {
	if id != nil {
		qu = qu.SetCityID(*id)
	}
	return qu
}

// SetCity sets the city edge to City.
func (qu *QueueUpdate) SetCity(c *City) *QueueUpdate {
	return qu.SetCityID(c.ID)
}

// SetConstructionID sets the construction edge to Construction by id.
func (qu *QueueUpdate) SetConstructionID(id int) *QueueUpdate {
	qu.mutation.SetConstructionID(id)
	return qu
}

// SetNillableConstructionID sets the construction edge to Construction by id if the given value is not nil.
func (qu *QueueUpdate) SetNillableConstructionID(id *int) *QueueUpdate {
	if id != nil {
		qu = qu.SetConstructionID(*id)
	}
	return qu
}

// SetConstruction sets the construction edge to Construction.
func (qu *QueueUpdate) SetConstruction(c *Construction) *QueueUpdate {
	return qu.SetConstructionID(c.ID)
}

// ClearOwner clears the owner edge to User.
func (qu *QueueUpdate) ClearOwner() *QueueUpdate {
	qu.mutation.ClearOwner()
	return qu
}

// ClearCity clears the city edge to City.
func (qu *QueueUpdate) ClearCity() *QueueUpdate {
	qu.mutation.ClearCity()
	return qu
}

// ClearConstruction clears the construction edge to Construction.
func (qu *QueueUpdate) ClearConstruction() *QueueUpdate {
	qu.mutation.ClearConstruction()
	return qu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (qu *QueueUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(qu.hooks) == 0 {
		affected, err = qu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*QueueMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			qu.mutation = mutation
			affected, err = qu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(qu.hooks) - 1; i >= 0; i-- {
			mut = qu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, qu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (qu *QueueUpdate) SaveX(ctx context.Context) int {
	affected, err := qu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qu *QueueUpdate) Exec(ctx context.Context) error {
	_, err := qu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qu *QueueUpdate) ExecX(ctx context.Context) {
	if err := qu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (qu *QueueUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   queue.Table,
			Columns: queue.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: queue.FieldID,
			},
		},
	}
	if ps := qu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qu.mutation.Completion(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: queue.FieldCompletion,
		})
	}
	if value, ok := qu.mutation.Action(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: queue.FieldAction,
		})
	}
	if value, ok := qu.mutation.AddedAction(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: queue.FieldAction,
		})
	}
	if value, ok := qu.mutation.Order(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: queue.FieldOrder,
		})
	}
	if value, ok := qu.mutation.AddedOrder(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: queue.FieldOrder,
		})
	}
	if qu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   queue.OwnerTable,
			Columns: []string{queue.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   queue.OwnerTable,
			Columns: []string{queue.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qu.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   queue.CityTable,
			Columns: []string{queue.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   queue.CityTable,
			Columns: []string{queue.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qu.mutation.ConstructionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   queue.ConstructionTable,
			Columns: []string{queue.ConstructionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: construction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.ConstructionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   queue.ConstructionTable,
			Columns: []string{queue.ConstructionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: construction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{queue.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// QueueUpdateOne is the builder for updating a single Queue entity.
type QueueUpdateOne struct {
	config
	hooks    []Hook
	mutation *QueueMutation
}

// SetCompletion sets the completion field.
func (quo *QueueUpdateOne) SetCompletion(t time.Time) *QueueUpdateOne {
	quo.mutation.SetCompletion(t)
	return quo
}

// SetAction sets the action field.
func (quo *QueueUpdateOne) SetAction(i int) *QueueUpdateOne {
	quo.mutation.ResetAction()
	quo.mutation.SetAction(i)
	return quo
}

// AddAction adds i to action.
func (quo *QueueUpdateOne) AddAction(i int) *QueueUpdateOne {
	quo.mutation.AddAction(i)
	return quo
}

// SetOrder sets the order field.
func (quo *QueueUpdateOne) SetOrder(i int) *QueueUpdateOne {
	quo.mutation.ResetOrder()
	quo.mutation.SetOrder(i)
	return quo
}

// AddOrder adds i to order.
func (quo *QueueUpdateOne) AddOrder(i int) *QueueUpdateOne {
	quo.mutation.AddOrder(i)
	return quo
}

// SetOwnerID sets the owner edge to User by id.
func (quo *QueueUpdateOne) SetOwnerID(id int) *QueueUpdateOne {
	quo.mutation.SetOwnerID(id)
	return quo
}

// SetNillableOwnerID sets the owner edge to User by id if the given value is not nil.
func (quo *QueueUpdateOne) SetNillableOwnerID(id *int) *QueueUpdateOne {
	if id != nil {
		quo = quo.SetOwnerID(*id)
	}
	return quo
}

// SetOwner sets the owner edge to User.
func (quo *QueueUpdateOne) SetOwner(u *User) *QueueUpdateOne {
	return quo.SetOwnerID(u.ID)
}

// SetCityID sets the city edge to City by id.
func (quo *QueueUpdateOne) SetCityID(id int) *QueueUpdateOne {
	quo.mutation.SetCityID(id)
	return quo
}

// SetNillableCityID sets the city edge to City by id if the given value is not nil.
func (quo *QueueUpdateOne) SetNillableCityID(id *int) *QueueUpdateOne {
	if id != nil {
		quo = quo.SetCityID(*id)
	}
	return quo
}

// SetCity sets the city edge to City.
func (quo *QueueUpdateOne) SetCity(c *City) *QueueUpdateOne {
	return quo.SetCityID(c.ID)
}

// SetConstructionID sets the construction edge to Construction by id.
func (quo *QueueUpdateOne) SetConstructionID(id int) *QueueUpdateOne {
	quo.mutation.SetConstructionID(id)
	return quo
}

// SetNillableConstructionID sets the construction edge to Construction by id if the given value is not nil.
func (quo *QueueUpdateOne) SetNillableConstructionID(id *int) *QueueUpdateOne {
	if id != nil {
		quo = quo.SetConstructionID(*id)
	}
	return quo
}

// SetConstruction sets the construction edge to Construction.
func (quo *QueueUpdateOne) SetConstruction(c *Construction) *QueueUpdateOne {
	return quo.SetConstructionID(c.ID)
}

// ClearOwner clears the owner edge to User.
func (quo *QueueUpdateOne) ClearOwner() *QueueUpdateOne {
	quo.mutation.ClearOwner()
	return quo
}

// ClearCity clears the city edge to City.
func (quo *QueueUpdateOne) ClearCity() *QueueUpdateOne {
	quo.mutation.ClearCity()
	return quo
}

// ClearConstruction clears the construction edge to Construction.
func (quo *QueueUpdateOne) ClearConstruction() *QueueUpdateOne {
	quo.mutation.ClearConstruction()
	return quo
}

// Save executes the query and returns the updated entity.
func (quo *QueueUpdateOne) Save(ctx context.Context) (*Queue, error) {

	var (
		err  error
		node *Queue
	)
	if len(quo.hooks) == 0 {
		node, err = quo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*QueueMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			quo.mutation = mutation
			node, err = quo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(quo.hooks) - 1; i >= 0; i-- {
			mut = quo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, quo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (quo *QueueUpdateOne) SaveX(ctx context.Context) *Queue {
	q, err := quo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return q
}

// Exec executes the query on the entity.
func (quo *QueueUpdateOne) Exec(ctx context.Context) error {
	_, err := quo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (quo *QueueUpdateOne) ExecX(ctx context.Context) {
	if err := quo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (quo *QueueUpdateOne) sqlSave(ctx context.Context) (q *Queue, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   queue.Table,
			Columns: queue.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: queue.FieldID,
			},
		},
	}
	id, ok := quo.mutation.ID()
	if !ok {
		return nil, fmt.Errorf("missing Queue.ID for update")
	}
	_spec.Node.ID.Value = id
	if value, ok := quo.mutation.Completion(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: queue.FieldCompletion,
		})
	}
	if value, ok := quo.mutation.Action(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: queue.FieldAction,
		})
	}
	if value, ok := quo.mutation.AddedAction(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: queue.FieldAction,
		})
	}
	if value, ok := quo.mutation.Order(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: queue.FieldOrder,
		})
	}
	if value, ok := quo.mutation.AddedOrder(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: queue.FieldOrder,
		})
	}
	if quo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   queue.OwnerTable,
			Columns: []string{queue.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   queue.OwnerTable,
			Columns: []string{queue.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if quo.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   queue.CityTable,
			Columns: []string{queue.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   queue.CityTable,
			Columns: []string{queue.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if quo.mutation.ConstructionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   queue.ConstructionTable,
			Columns: []string{queue.ConstructionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: construction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.ConstructionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   queue.ConstructionTable,
			Columns: []string{queue.ConstructionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: construction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	q = &Queue{config: quo.config}
	_spec.Assign = q.assignValues
	_spec.ScanValues = q.scanValues()
	if err = sqlgraph.UpdateNode(ctx, quo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{queue.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return q, nil
}
