// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"lou-core/ent/city"
	"lou-core/ent/construction"
	"lou-core/ent/predicate"
	"lou-core/ent/queue"
	"lou-core/ent/user"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks      []Hook
	mutation   *UserMutation
	predicates []predicate.User
}

// Where adds a new predicate for the builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.predicates = append(uu.predicates, ps...)
	return uu
}

// SetName sets the name field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetEmail sets the email field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetPasswordHash sets the password_hash field.
func (uu *UserUpdate) SetPasswordHash(s string) *UserUpdate {
	uu.mutation.SetPasswordHash(s)
	return uu
}

// SetGold sets the gold field.
func (uu *UserUpdate) SetGold(i int) *UserUpdate {
	uu.mutation.ResetGold()
	uu.mutation.SetGold(i)
	return uu
}

// SetNillableGold sets the gold field if the given value is not nil.
func (uu *UserUpdate) SetNillableGold(i *int) *UserUpdate {
	if i != nil {
		uu.SetGold(*i)
	}
	return uu
}

// AddGold adds i to gold.
func (uu *UserUpdate) AddGold(i int) *UserUpdate {
	uu.mutation.AddGold(i)
	return uu
}

// SetDiamonds sets the diamonds field.
func (uu *UserUpdate) SetDiamonds(i int) *UserUpdate {
	uu.mutation.ResetDiamonds()
	uu.mutation.SetDiamonds(i)
	return uu
}

// SetNillableDiamonds sets the diamonds field if the given value is not nil.
func (uu *UserUpdate) SetNillableDiamonds(i *int) *UserUpdate {
	if i != nil {
		uu.SetDiamonds(*i)
	}
	return uu
}

// AddDiamonds adds i to diamonds.
func (uu *UserUpdate) AddDiamonds(i int) *UserUpdate {
	uu.mutation.AddDiamonds(i)
	return uu
}

// SetDarkwood sets the darkwood field.
func (uu *UserUpdate) SetDarkwood(i int) *UserUpdate {
	uu.mutation.ResetDarkwood()
	uu.mutation.SetDarkwood(i)
	return uu
}

// SetNillableDarkwood sets the darkwood field if the given value is not nil.
func (uu *UserUpdate) SetNillableDarkwood(i *int) *UserUpdate {
	if i != nil {
		uu.SetDarkwood(*i)
	}
	return uu
}

// AddDarkwood adds i to darkwood.
func (uu *UserUpdate) AddDarkwood(i int) *UserUpdate {
	uu.mutation.AddDarkwood(i)
	return uu
}

// SetRunestone sets the runestone field.
func (uu *UserUpdate) SetRunestone(i int) *UserUpdate {
	uu.mutation.ResetRunestone()
	uu.mutation.SetRunestone(i)
	return uu
}

// SetNillableRunestone sets the runestone field if the given value is not nil.
func (uu *UserUpdate) SetNillableRunestone(i *int) *UserUpdate {
	if i != nil {
		uu.SetRunestone(*i)
	}
	return uu
}

// AddRunestone adds i to runestone.
func (uu *UserUpdate) AddRunestone(i int) *UserUpdate {
	uu.mutation.AddRunestone(i)
	return uu
}

// SetVeritium sets the veritium field.
func (uu *UserUpdate) SetVeritium(i int) *UserUpdate {
	uu.mutation.ResetVeritium()
	uu.mutation.SetVeritium(i)
	return uu
}

// SetNillableVeritium sets the veritium field if the given value is not nil.
func (uu *UserUpdate) SetNillableVeritium(i *int) *UserUpdate {
	if i != nil {
		uu.SetVeritium(*i)
	}
	return uu
}

// AddVeritium adds i to veritium.
func (uu *UserUpdate) AddVeritium(i int) *UserUpdate {
	uu.mutation.AddVeritium(i)
	return uu
}

// SetTrueseed sets the trueseed field.
func (uu *UserUpdate) SetTrueseed(i int) *UserUpdate {
	uu.mutation.ResetTrueseed()
	uu.mutation.SetTrueseed(i)
	return uu
}

// SetNillableTrueseed sets the trueseed field if the given value is not nil.
func (uu *UserUpdate) SetNillableTrueseed(i *int) *UserUpdate {
	if i != nil {
		uu.SetTrueseed(*i)
	}
	return uu
}

// AddTrueseed adds i to trueseed.
func (uu *UserUpdate) AddTrueseed(i int) *UserUpdate {
	uu.mutation.AddTrueseed(i)
	return uu
}

// SetRank sets the rank field.
func (uu *UserUpdate) SetRank(i int) *UserUpdate {
	uu.mutation.ResetRank()
	uu.mutation.SetRank(i)
	return uu
}

// SetNillableRank sets the rank field if the given value is not nil.
func (uu *UserUpdate) SetNillableRank(i *int) *UserUpdate {
	if i != nil {
		uu.SetRank(*i)
	}
	return uu
}

// AddRank adds i to rank.
func (uu *UserUpdate) AddRank(i int) *UserUpdate {
	uu.mutation.AddRank(i)
	return uu
}

// SetAllianceRank sets the alliance_rank field.
func (uu *UserUpdate) SetAllianceRank(i int) *UserUpdate {
	uu.mutation.ResetAllianceRank()
	uu.mutation.SetAllianceRank(i)
	return uu
}

// SetNillableAllianceRank sets the alliance_rank field if the given value is not nil.
func (uu *UserUpdate) SetNillableAllianceRank(i *int) *UserUpdate {
	if i != nil {
		uu.SetAllianceRank(*i)
	}
	return uu
}

// AddAllianceRank adds i to alliance_rank.
func (uu *UserUpdate) AddAllianceRank(i int) *UserUpdate {
	uu.mutation.AddAllianceRank(i)
	return uu
}

// AddCityIDs adds the cities edge to City by ids.
func (uu *UserUpdate) AddCityIDs(ids ...int) *UserUpdate {
	uu.mutation.AddCityIDs(ids...)
	return uu
}

// AddCities adds the cities edges to City.
func (uu *UserUpdate) AddCities(c ...*City) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddCityIDs(ids...)
}

// AddQueueIDs adds the queue edge to Queue by ids.
func (uu *UserUpdate) AddQueueIDs(ids ...int) *UserUpdate {
	uu.mutation.AddQueueIDs(ids...)
	return uu
}

// AddQueue adds the queue edges to Queue.
func (uu *UserUpdate) AddQueue(q ...*Queue) *UserUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return uu.AddQueueIDs(ids...)
}

// AddConstructionIDs adds the constructions edge to Construction by ids.
func (uu *UserUpdate) AddConstructionIDs(ids ...int) *UserUpdate {
	uu.mutation.AddConstructionIDs(ids...)
	return uu
}

// AddConstructions adds the constructions edges to Construction.
func (uu *UserUpdate) AddConstructions(c ...*Construction) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddConstructionIDs(ids...)
}

// RemoveCityIDs removes the cities edge to City by ids.
func (uu *UserUpdate) RemoveCityIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveCityIDs(ids...)
	return uu
}

// RemoveCities removes cities edges to City.
func (uu *UserUpdate) RemoveCities(c ...*City) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveCityIDs(ids...)
}

// RemoveQueueIDs removes the queue edge to Queue by ids.
func (uu *UserUpdate) RemoveQueueIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveQueueIDs(ids...)
	return uu
}

// RemoveQueue removes queue edges to Queue.
func (uu *UserUpdate) RemoveQueue(q ...*Queue) *UserUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return uu.RemoveQueueIDs(ids...)
}

// RemoveConstructionIDs removes the constructions edge to Construction by ids.
func (uu *UserUpdate) RemoveConstructionIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveConstructionIDs(ids...)
	return uu
}

// RemoveConstructions removes constructions edges to Construction.
func (uu *UserUpdate) RemoveConstructions(c ...*Construction) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveConstructionIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := uu.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"name\": %w", err)
		}
	}
	if v, ok := uu.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"email\": %w", err)
		}
	}
	if v, ok := uu.mutation.PasswordHash(); ok {
		if err := user.PasswordHashValidator(v); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"password_hash\": %w", err)
		}
	}

	var (
		err      error
		affected int
	)
	if len(uu.hooks) == 0 {
		affected, err = uu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uu.mutation = mutation
			affected, err = uu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uu.hooks) - 1; i >= 0; i-- {
			mut = uu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	if ps := uu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldName,
		})
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldEmail,
		})
	}
	if value, ok := uu.mutation.PasswordHash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPasswordHash,
		})
	}
	if value, ok := uu.mutation.Gold(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldGold,
		})
	}
	if value, ok := uu.mutation.AddedGold(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldGold,
		})
	}
	if value, ok := uu.mutation.Diamonds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldDiamonds,
		})
	}
	if value, ok := uu.mutation.AddedDiamonds(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldDiamonds,
		})
	}
	if value, ok := uu.mutation.Darkwood(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldDarkwood,
		})
	}
	if value, ok := uu.mutation.AddedDarkwood(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldDarkwood,
		})
	}
	if value, ok := uu.mutation.Runestone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldRunestone,
		})
	}
	if value, ok := uu.mutation.AddedRunestone(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldRunestone,
		})
	}
	if value, ok := uu.mutation.Veritium(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldVeritium,
		})
	}
	if value, ok := uu.mutation.AddedVeritium(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldVeritium,
		})
	}
	if value, ok := uu.mutation.Trueseed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldTrueseed,
		})
	}
	if value, ok := uu.mutation.AddedTrueseed(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldTrueseed,
		})
	}
	if value, ok := uu.mutation.Rank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldRank,
		})
	}
	if value, ok := uu.mutation.AddedRank(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldRank,
		})
	}
	if value, ok := uu.mutation.AllianceRank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldAllianceRank,
		})
	}
	if value, ok := uu.mutation.AddedAllianceRank(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldAllianceRank,
		})
	}
	if nodes := uu.mutation.RemovedCitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CitiesTable,
			Columns: []string{user.CitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CitiesTable,
			Columns: []string{user.CitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := uu.mutation.RemovedQueueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.QueueTable,
			Columns: []string{user.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: queue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.QueueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.QueueTable,
			Columns: []string{user.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: queue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := uu.mutation.RemovedConstructionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ConstructionsTable,
			Columns: []string{user.ConstructionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: construction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ConstructionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ConstructionsTable,
			Columns: []string{user.ConstructionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: construction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// SetName sets the name field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetEmail sets the email field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetPasswordHash sets the password_hash field.
func (uuo *UserUpdateOne) SetPasswordHash(s string) *UserUpdateOne {
	uuo.mutation.SetPasswordHash(s)
	return uuo
}

// SetGold sets the gold field.
func (uuo *UserUpdateOne) SetGold(i int) *UserUpdateOne {
	uuo.mutation.ResetGold()
	uuo.mutation.SetGold(i)
	return uuo
}

// SetNillableGold sets the gold field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableGold(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetGold(*i)
	}
	return uuo
}

// AddGold adds i to gold.
func (uuo *UserUpdateOne) AddGold(i int) *UserUpdateOne {
	uuo.mutation.AddGold(i)
	return uuo
}

// SetDiamonds sets the diamonds field.
func (uuo *UserUpdateOne) SetDiamonds(i int) *UserUpdateOne {
	uuo.mutation.ResetDiamonds()
	uuo.mutation.SetDiamonds(i)
	return uuo
}

// SetNillableDiamonds sets the diamonds field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDiamonds(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetDiamonds(*i)
	}
	return uuo
}

// AddDiamonds adds i to diamonds.
func (uuo *UserUpdateOne) AddDiamonds(i int) *UserUpdateOne {
	uuo.mutation.AddDiamonds(i)
	return uuo
}

// SetDarkwood sets the darkwood field.
func (uuo *UserUpdateOne) SetDarkwood(i int) *UserUpdateOne {
	uuo.mutation.ResetDarkwood()
	uuo.mutation.SetDarkwood(i)
	return uuo
}

// SetNillableDarkwood sets the darkwood field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDarkwood(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetDarkwood(*i)
	}
	return uuo
}

// AddDarkwood adds i to darkwood.
func (uuo *UserUpdateOne) AddDarkwood(i int) *UserUpdateOne {
	uuo.mutation.AddDarkwood(i)
	return uuo
}

// SetRunestone sets the runestone field.
func (uuo *UserUpdateOne) SetRunestone(i int) *UserUpdateOne {
	uuo.mutation.ResetRunestone()
	uuo.mutation.SetRunestone(i)
	return uuo
}

// SetNillableRunestone sets the runestone field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRunestone(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetRunestone(*i)
	}
	return uuo
}

// AddRunestone adds i to runestone.
func (uuo *UserUpdateOne) AddRunestone(i int) *UserUpdateOne {
	uuo.mutation.AddRunestone(i)
	return uuo
}

// SetVeritium sets the veritium field.
func (uuo *UserUpdateOne) SetVeritium(i int) *UserUpdateOne {
	uuo.mutation.ResetVeritium()
	uuo.mutation.SetVeritium(i)
	return uuo
}

// SetNillableVeritium sets the veritium field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableVeritium(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetVeritium(*i)
	}
	return uuo
}

// AddVeritium adds i to veritium.
func (uuo *UserUpdateOne) AddVeritium(i int) *UserUpdateOne {
	uuo.mutation.AddVeritium(i)
	return uuo
}

// SetTrueseed sets the trueseed field.
func (uuo *UserUpdateOne) SetTrueseed(i int) *UserUpdateOne {
	uuo.mutation.ResetTrueseed()
	uuo.mutation.SetTrueseed(i)
	return uuo
}

// SetNillableTrueseed sets the trueseed field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTrueseed(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetTrueseed(*i)
	}
	return uuo
}

// AddTrueseed adds i to trueseed.
func (uuo *UserUpdateOne) AddTrueseed(i int) *UserUpdateOne {
	uuo.mutation.AddTrueseed(i)
	return uuo
}

// SetRank sets the rank field.
func (uuo *UserUpdateOne) SetRank(i int) *UserUpdateOne {
	uuo.mutation.ResetRank()
	uuo.mutation.SetRank(i)
	return uuo
}

// SetNillableRank sets the rank field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRank(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetRank(*i)
	}
	return uuo
}

// AddRank adds i to rank.
func (uuo *UserUpdateOne) AddRank(i int) *UserUpdateOne {
	uuo.mutation.AddRank(i)
	return uuo
}

// SetAllianceRank sets the alliance_rank field.
func (uuo *UserUpdateOne) SetAllianceRank(i int) *UserUpdateOne {
	uuo.mutation.ResetAllianceRank()
	uuo.mutation.SetAllianceRank(i)
	return uuo
}

// SetNillableAllianceRank sets the alliance_rank field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAllianceRank(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetAllianceRank(*i)
	}
	return uuo
}

// AddAllianceRank adds i to alliance_rank.
func (uuo *UserUpdateOne) AddAllianceRank(i int) *UserUpdateOne {
	uuo.mutation.AddAllianceRank(i)
	return uuo
}

// AddCityIDs adds the cities edge to City by ids.
func (uuo *UserUpdateOne) AddCityIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddCityIDs(ids...)
	return uuo
}

// AddCities adds the cities edges to City.
func (uuo *UserUpdateOne) AddCities(c ...*City) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddCityIDs(ids...)
}

// AddQueueIDs adds the queue edge to Queue by ids.
func (uuo *UserUpdateOne) AddQueueIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddQueueIDs(ids...)
	return uuo
}

// AddQueue adds the queue edges to Queue.
func (uuo *UserUpdateOne) AddQueue(q ...*Queue) *UserUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return uuo.AddQueueIDs(ids...)
}

// AddConstructionIDs adds the constructions edge to Construction by ids.
func (uuo *UserUpdateOne) AddConstructionIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddConstructionIDs(ids...)
	return uuo
}

// AddConstructions adds the constructions edges to Construction.
func (uuo *UserUpdateOne) AddConstructions(c ...*Construction) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddConstructionIDs(ids...)
}

// RemoveCityIDs removes the cities edge to City by ids.
func (uuo *UserUpdateOne) RemoveCityIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveCityIDs(ids...)
	return uuo
}

// RemoveCities removes cities edges to City.
func (uuo *UserUpdateOne) RemoveCities(c ...*City) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveCityIDs(ids...)
}

// RemoveQueueIDs removes the queue edge to Queue by ids.
func (uuo *UserUpdateOne) RemoveQueueIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveQueueIDs(ids...)
	return uuo
}

// RemoveQueue removes queue edges to Queue.
func (uuo *UserUpdateOne) RemoveQueue(q ...*Queue) *UserUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return uuo.RemoveQueueIDs(ids...)
}

// RemoveConstructionIDs removes the constructions edge to Construction by ids.
func (uuo *UserUpdateOne) RemoveConstructionIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveConstructionIDs(ids...)
	return uuo
}

// RemoveConstructions removes constructions edges to Construction.
func (uuo *UserUpdateOne) RemoveConstructions(c ...*Construction) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveConstructionIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	if v, ok := uuo.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"name\": %w", err)
		}
	}
	if v, ok := uuo.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"email\": %w", err)
		}
	}
	if v, ok := uuo.mutation.PasswordHash(); ok {
		if err := user.PasswordHashValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"password_hash\": %w", err)
		}
	}

	var (
		err  error
		node *User
	)
	if len(uuo.hooks) == 0 {
		node, err = uuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uuo.mutation = mutation
			node, err = uuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uuo.hooks) - 1; i >= 0; i-- {
			mut = uuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	u, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return u
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (u *User, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, fmt.Errorf("missing User.ID for update")
	}
	_spec.Node.ID.Value = id
	if value, ok := uuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldName,
		})
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldEmail,
		})
	}
	if value, ok := uuo.mutation.PasswordHash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPasswordHash,
		})
	}
	if value, ok := uuo.mutation.Gold(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldGold,
		})
	}
	if value, ok := uuo.mutation.AddedGold(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldGold,
		})
	}
	if value, ok := uuo.mutation.Diamonds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldDiamonds,
		})
	}
	if value, ok := uuo.mutation.AddedDiamonds(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldDiamonds,
		})
	}
	if value, ok := uuo.mutation.Darkwood(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldDarkwood,
		})
	}
	if value, ok := uuo.mutation.AddedDarkwood(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldDarkwood,
		})
	}
	if value, ok := uuo.mutation.Runestone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldRunestone,
		})
	}
	if value, ok := uuo.mutation.AddedRunestone(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldRunestone,
		})
	}
	if value, ok := uuo.mutation.Veritium(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldVeritium,
		})
	}
	if value, ok := uuo.mutation.AddedVeritium(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldVeritium,
		})
	}
	if value, ok := uuo.mutation.Trueseed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldTrueseed,
		})
	}
	if value, ok := uuo.mutation.AddedTrueseed(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldTrueseed,
		})
	}
	if value, ok := uuo.mutation.Rank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldRank,
		})
	}
	if value, ok := uuo.mutation.AddedRank(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldRank,
		})
	}
	if value, ok := uuo.mutation.AllianceRank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldAllianceRank,
		})
	}
	if value, ok := uuo.mutation.AddedAllianceRank(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldAllianceRank,
		})
	}
	if nodes := uuo.mutation.RemovedCitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CitiesTable,
			Columns: []string{user.CitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CitiesTable,
			Columns: []string{user.CitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := uuo.mutation.RemovedQueueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.QueueTable,
			Columns: []string{user.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: queue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.QueueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.QueueTable,
			Columns: []string{user.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: queue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := uuo.mutation.RemovedConstructionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ConstructionsTable,
			Columns: []string{user.ConstructionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: construction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ConstructionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ConstructionsTable,
			Columns: []string{user.ConstructionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: construction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	u = &User{config: uuo.config}
	_spec.Assign = u.assignValues
	_spec.ScanValues = u.scanValues()
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return u, nil
}
