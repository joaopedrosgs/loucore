// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/joaopedrosgs/loucore/ent/migrate"

	"github.com/joaopedrosgs/loucore/ent/city"
	"github.com/joaopedrosgs/loucore/ent/construction"
	"github.com/joaopedrosgs/loucore/ent/queueitem"
	"github.com/joaopedrosgs/loucore/ent/user"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// City is the client for interacting with the City builders.
	City *CityClient
	// Construction is the client for interacting with the Construction builders.
	Construction *ConstructionClient
	// QueueItem is the client for interacting with the QueueItem builders.
	QueueItem *QueueItemClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.City = NewCityClient(c.config)
	c.Construction = NewConstructionClient(c.config)
	c.QueueItem = NewQueueItemClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:       cfg,
		City:         NewCityClient(cfg),
		Construction: NewConstructionClient(cfg),
		QueueItem:    NewQueueItemClient(cfg),
		User:         NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:       cfg,
		City:         NewCityClient(cfg),
		Construction: NewConstructionClient(cfg),
		QueueItem:    NewQueueItemClient(cfg),
		User:         NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		City.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.City.Use(hooks...)
	c.Construction.Use(hooks...)
	c.QueueItem.Use(hooks...)
	c.User.Use(hooks...)
}

// CityClient is a client for the City schema.
type CityClient struct {
	config
}

// NewCityClient returns a client for the City from the given config.
func NewCityClient(c config) *CityClient {
	return &CityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `city.Hooks(f(g(h())))`.
func (c *CityClient) Use(hooks ...Hook) {
	c.hooks.City = append(c.hooks.City, hooks...)
}

// Create returns a create builder for City.
func (c *CityClient) Create() *CityCreate {
	mutation := newCityMutation(c.config, OpCreate)
	return &CityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for City.
func (c *CityClient) Update() *CityUpdate {
	mutation := newCityMutation(c.config, OpUpdate)
	return &CityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CityClient) UpdateOne(ci *City) *CityUpdateOne {
	mutation := newCityMutation(c.config, OpUpdateOne, withCity(ci))
	return &CityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CityClient) UpdateOneID(id int) *CityUpdateOne {
	mutation := newCityMutation(c.config, OpUpdateOne, withCityID(id))
	return &CityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for City.
func (c *CityClient) Delete() *CityDelete {
	mutation := newCityMutation(c.config, OpDelete)
	return &CityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CityClient) DeleteOne(ci *City) *CityDeleteOne {
	return c.DeleteOneID(ci.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CityClient) DeleteOneID(id int) *CityDeleteOne {
	builder := c.Delete().Where(city.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CityDeleteOne{builder}
}

// Create returns a query builder for City.
func (c *CityClient) Query() *CityQuery {
	return &CityQuery{config: c.config}
}

// Get returns a City entity by its id.
func (c *CityClient) Get(ctx context.Context, id int) (*City, error) {
	return c.Query().Where(city.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CityClient) GetX(ctx context.Context, id int) *City {
	ci, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ci
}

// QueryOwner queries the owner edge of a City.
func (c *CityClient) QueryOwner(ci *City) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(city.Table, city.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, city.OwnerTable, city.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryConstructions queries the constructions edge of a City.
func (c *CityClient) QueryConstructions(ci *City) *ConstructionQuery {
	query := &ConstructionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(city.Table, city.FieldID, id),
			sqlgraph.To(construction.Table, construction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, city.ConstructionsTable, city.ConstructionsColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryQueue queries the queue edge of a City.
func (c *CityClient) QueryQueue(ci *City) *QueueItemQuery {
	query := &QueueItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(city.Table, city.FieldID, id),
			sqlgraph.To(queueitem.Table, queueitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, city.QueueTable, city.QueueColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CityClient) Hooks() []Hook {
	return c.hooks.City
}

// ConstructionClient is a client for the Construction schema.
type ConstructionClient struct {
	config
}

// NewConstructionClient returns a client for the Construction from the given config.
func NewConstructionClient(c config) *ConstructionClient {
	return &ConstructionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `construction.Hooks(f(g(h())))`.
func (c *ConstructionClient) Use(hooks ...Hook) {
	c.hooks.Construction = append(c.hooks.Construction, hooks...)
}

// Create returns a create builder for Construction.
func (c *ConstructionClient) Create() *ConstructionCreate {
	mutation := newConstructionMutation(c.config, OpCreate)
	return &ConstructionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Construction.
func (c *ConstructionClient) Update() *ConstructionUpdate {
	mutation := newConstructionMutation(c.config, OpUpdate)
	return &ConstructionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ConstructionClient) UpdateOne(co *Construction) *ConstructionUpdateOne {
	mutation := newConstructionMutation(c.config, OpUpdateOne, withConstruction(co))
	return &ConstructionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ConstructionClient) UpdateOneID(id int) *ConstructionUpdateOne {
	mutation := newConstructionMutation(c.config, OpUpdateOne, withConstructionID(id))
	return &ConstructionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Construction.
func (c *ConstructionClient) Delete() *ConstructionDelete {
	mutation := newConstructionMutation(c.config, OpDelete)
	return &ConstructionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ConstructionClient) DeleteOne(co *Construction) *ConstructionDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ConstructionClient) DeleteOneID(id int) *ConstructionDeleteOne {
	builder := c.Delete().Where(construction.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ConstructionDeleteOne{builder}
}

// Create returns a query builder for Construction.
func (c *ConstructionClient) Query() *ConstructionQuery {
	return &ConstructionQuery{config: c.config}
}

// Get returns a Construction entity by its id.
func (c *ConstructionClient) Get(ctx context.Context, id int) (*Construction, error) {
	return c.Query().Where(construction.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ConstructionClient) GetX(ctx context.Context, id int) *Construction {
	co, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return co
}

// QueryCity queries the city edge of a Construction.
func (c *ConstructionClient) QueryCity(co *Construction) *CityQuery {
	query := &CityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(construction.Table, construction.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, construction.CityTable, construction.CityColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOwner queries the owner edge of a Construction.
func (c *ConstructionClient) QueryOwner(co *Construction) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(construction.Table, construction.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, construction.OwnerTable, construction.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryQueue queries the queue edge of a Construction.
func (c *ConstructionClient) QueryQueue(co *Construction) *QueueItemQuery {
	query := &QueueItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(construction.Table, construction.FieldID, id),
			sqlgraph.To(queueitem.Table, queueitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, construction.QueueTable, construction.QueueColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAffects queries the affects edge of a Construction.
func (c *ConstructionClient) QueryAffects(co *Construction) *ConstructionQuery {
	query := &ConstructionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(construction.Table, construction.FieldID, id),
			sqlgraph.To(construction.Table, construction.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, construction.AffectsTable, construction.AffectsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAffectedBy queries the affected_by edge of a Construction.
func (c *ConstructionClient) QueryAffectedBy(co *Construction) *ConstructionQuery {
	query := &ConstructionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(construction.Table, construction.FieldID, id),
			sqlgraph.To(construction.Table, construction.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, construction.AffectedByTable, construction.AffectedByPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ConstructionClient) Hooks() []Hook {
	return c.hooks.Construction
}

// QueueItemClient is a client for the QueueItem schema.
type QueueItemClient struct {
	config
}

// NewQueueItemClient returns a client for the QueueItem from the given config.
func NewQueueItemClient(c config) *QueueItemClient {
	return &QueueItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `queueitem.Hooks(f(g(h())))`.
func (c *QueueItemClient) Use(hooks ...Hook) {
	c.hooks.QueueItem = append(c.hooks.QueueItem, hooks...)
}

// Create returns a create builder for QueueItem.
func (c *QueueItemClient) Create() *QueueItemCreate {
	mutation := newQueueItemMutation(c.config, OpCreate)
	return &QueueItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for QueueItem.
func (c *QueueItemClient) Update() *QueueItemUpdate {
	mutation := newQueueItemMutation(c.config, OpUpdate)
	return &QueueItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *QueueItemClient) UpdateOne(qi *QueueItem) *QueueItemUpdateOne {
	mutation := newQueueItemMutation(c.config, OpUpdateOne, withQueueItem(qi))
	return &QueueItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *QueueItemClient) UpdateOneID(id int) *QueueItemUpdateOne {
	mutation := newQueueItemMutation(c.config, OpUpdateOne, withQueueItemID(id))
	return &QueueItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for QueueItem.
func (c *QueueItemClient) Delete() *QueueItemDelete {
	mutation := newQueueItemMutation(c.config, OpDelete)
	return &QueueItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *QueueItemClient) DeleteOne(qi *QueueItem) *QueueItemDeleteOne {
	return c.DeleteOneID(qi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *QueueItemClient) DeleteOneID(id int) *QueueItemDeleteOne {
	builder := c.Delete().Where(queueitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &QueueItemDeleteOne{builder}
}

// Create returns a query builder for QueueItem.
func (c *QueueItemClient) Query() *QueueItemQuery {
	return &QueueItemQuery{config: c.config}
}

// Get returns a QueueItem entity by its id.
func (c *QueueItemClient) Get(ctx context.Context, id int) (*QueueItem, error) {
	return c.Query().Where(queueitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *QueueItemClient) GetX(ctx context.Context, id int) *QueueItem {
	qi, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return qi
}

// QueryOwner queries the owner edge of a QueueItem.
func (c *QueueItemClient) QueryOwner(qi *QueueItem) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := qi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(queueitem.Table, queueitem.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, queueitem.OwnerTable, queueitem.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(qi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCity queries the city edge of a QueueItem.
func (c *QueueItemClient) QueryCity(qi *QueueItem) *CityQuery {
	query := &CityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := qi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(queueitem.Table, queueitem.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, queueitem.CityTable, queueitem.CityColumn),
		)
		fromV = sqlgraph.Neighbors(qi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryConstruction queries the construction edge of a QueueItem.
func (c *QueueItemClient) QueryConstruction(qi *QueueItem) *ConstructionQuery {
	query := &ConstructionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := qi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(queueitem.Table, queueitem.FieldID, id),
			sqlgraph.To(construction.Table, construction.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, queueitem.ConstructionTable, queueitem.ConstructionColumn),
		)
		fromV = sqlgraph.Neighbors(qi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *QueueItemClient) Hooks() []Hook {
	return c.hooks.QueueItem
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Create returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	u, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return u
}

// QueryCities queries the cities edge of a User.
func (c *UserClient) QueryCities(u *User) *CityQuery {
	query := &CityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CitiesTable, user.CitiesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryQueue queries the queue edge of a User.
func (c *UserClient) QueryQueue(u *User) *QueueItemQuery {
	query := &QueueItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(queueitem.Table, queueitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.QueueTable, user.QueueColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryConstructions queries the constructions edge of a User.
func (c *UserClient) QueryConstructions(u *User) *ConstructionQuery {
	query := &ConstructionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(construction.Table, construction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ConstructionsTable, user.ConstructionsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
