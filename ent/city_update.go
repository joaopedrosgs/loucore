// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/joaopedrosgs/loucore/ent/city"
	"github.com/joaopedrosgs/loucore/ent/construction"
	"github.com/joaopedrosgs/loucore/ent/predicate"
	"github.com/joaopedrosgs/loucore/ent/queueitem"
	"github.com/joaopedrosgs/loucore/ent/user"
)

// CityUpdate is the builder for updating City entities.
type CityUpdate struct {
	config
	hooks      []Hook
	mutation   *CityMutation
	predicates []predicate.City
}

// Where adds a new predicate for the builder.
func (cu *CityUpdate) Where(ps ...predicate.City) *CityUpdate {
	cu.predicates = append(cu.predicates, ps...)
	return cu
}

// SetX sets the x field.
func (cu *CityUpdate) SetX(i int) *CityUpdate {
	cu.mutation.ResetX()
	cu.mutation.SetX(i)
	return cu
}

// SetNillableX sets the x field if the given value is not nil.
func (cu *CityUpdate) SetNillableX(i *int) *CityUpdate {
	if i != nil {
		cu.SetX(*i)
	}
	return cu
}

// AddX adds i to x.
func (cu *CityUpdate) AddX(i int) *CityUpdate {
	cu.mutation.AddX(i)
	return cu
}

// SetY sets the y field.
func (cu *CityUpdate) SetY(i int) *CityUpdate {
	cu.mutation.ResetY()
	cu.mutation.SetY(i)
	return cu
}

// SetNillableY sets the y field if the given value is not nil.
func (cu *CityUpdate) SetNillableY(i *int) *CityUpdate {
	if i != nil {
		cu.SetY(*i)
	}
	return cu
}

// AddY adds i to y.
func (cu *CityUpdate) AddY(i int) *CityUpdate {
	cu.mutation.AddY(i)
	return cu
}

// SetName sets the name field.
func (cu *CityUpdate) SetName(s string) *CityUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the name field if the given value is not nil.
func (cu *CityUpdate) SetNillableName(s *string) *CityUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetPoints sets the points field.
func (cu *CityUpdate) SetPoints(i int) *CityUpdate {
	cu.mutation.ResetPoints()
	cu.mutation.SetPoints(i)
	return cu
}

// SetNillablePoints sets the points field if the given value is not nil.
func (cu *CityUpdate) SetNillablePoints(i *int) *CityUpdate {
	if i != nil {
		cu.SetPoints(*i)
	}
	return cu
}

// AddPoints adds i to points.
func (cu *CityUpdate) AddPoints(i int) *CityUpdate {
	cu.mutation.AddPoints(i)
	return cu
}

// SetWoodProduction sets the wood_production field.
func (cu *CityUpdate) SetWoodProduction(f float64) *CityUpdate {
	cu.mutation.ResetWoodProduction()
	cu.mutation.SetWoodProduction(f)
	return cu
}

// SetNillableWoodProduction sets the wood_production field if the given value is not nil.
func (cu *CityUpdate) SetNillableWoodProduction(f *float64) *CityUpdate {
	if f != nil {
		cu.SetWoodProduction(*f)
	}
	return cu
}

// AddWoodProduction adds f to wood_production.
func (cu *CityUpdate) AddWoodProduction(f float64) *CityUpdate {
	cu.mutation.AddWoodProduction(f)
	return cu
}

// SetStoneProduction sets the stone_production field.
func (cu *CityUpdate) SetStoneProduction(f float64) *CityUpdate {
	cu.mutation.ResetStoneProduction()
	cu.mutation.SetStoneProduction(f)
	return cu
}

// SetNillableStoneProduction sets the stone_production field if the given value is not nil.
func (cu *CityUpdate) SetNillableStoneProduction(f *float64) *CityUpdate {
	if f != nil {
		cu.SetStoneProduction(*f)
	}
	return cu
}

// AddStoneProduction adds f to stone_production.
func (cu *CityUpdate) AddStoneProduction(f float64) *CityUpdate {
	cu.mutation.AddStoneProduction(f)
	return cu
}

// SetIronProduction sets the iron_production field.
func (cu *CityUpdate) SetIronProduction(f float64) *CityUpdate {
	cu.mutation.ResetIronProduction()
	cu.mutation.SetIronProduction(f)
	return cu
}

// SetNillableIronProduction sets the iron_production field if the given value is not nil.
func (cu *CityUpdate) SetNillableIronProduction(f *float64) *CityUpdate {
	if f != nil {
		cu.SetIronProduction(*f)
	}
	return cu
}

// AddIronProduction adds f to iron_production.
func (cu *CityUpdate) AddIronProduction(f float64) *CityUpdate {
	cu.mutation.AddIronProduction(f)
	return cu
}

// SetFoodProduction sets the food_production field.
func (cu *CityUpdate) SetFoodProduction(f float64) *CityUpdate {
	cu.mutation.ResetFoodProduction()
	cu.mutation.SetFoodProduction(f)
	return cu
}

// SetNillableFoodProduction sets the food_production field if the given value is not nil.
func (cu *CityUpdate) SetNillableFoodProduction(f *float64) *CityUpdate {
	if f != nil {
		cu.SetFoodProduction(*f)
	}
	return cu
}

// AddFoodProduction adds f to food_production.
func (cu *CityUpdate) AddFoodProduction(f float64) *CityUpdate {
	cu.mutation.AddFoodProduction(f)
	return cu
}

// SetWoodStored sets the wood_stored field.
func (cu *CityUpdate) SetWoodStored(f float64) *CityUpdate {
	cu.mutation.ResetWoodStored()
	cu.mutation.SetWoodStored(f)
	return cu
}

// SetNillableWoodStored sets the wood_stored field if the given value is not nil.
func (cu *CityUpdate) SetNillableWoodStored(f *float64) *CityUpdate {
	if f != nil {
		cu.SetWoodStored(*f)
	}
	return cu
}

// AddWoodStored adds f to wood_stored.
func (cu *CityUpdate) AddWoodStored(f float64) *CityUpdate {
	cu.mutation.AddWoodStored(f)
	return cu
}

// SetStoneStored sets the stone_stored field.
func (cu *CityUpdate) SetStoneStored(f float64) *CityUpdate {
	cu.mutation.ResetStoneStored()
	cu.mutation.SetStoneStored(f)
	return cu
}

// SetNillableStoneStored sets the stone_stored field if the given value is not nil.
func (cu *CityUpdate) SetNillableStoneStored(f *float64) *CityUpdate {
	if f != nil {
		cu.SetStoneStored(*f)
	}
	return cu
}

// AddStoneStored adds f to stone_stored.
func (cu *CityUpdate) AddStoneStored(f float64) *CityUpdate {
	cu.mutation.AddStoneStored(f)
	return cu
}

// SetIronStored sets the iron_stored field.
func (cu *CityUpdate) SetIronStored(f float64) *CityUpdate {
	cu.mutation.ResetIronStored()
	cu.mutation.SetIronStored(f)
	return cu
}

// SetNillableIronStored sets the iron_stored field if the given value is not nil.
func (cu *CityUpdate) SetNillableIronStored(f *float64) *CityUpdate {
	if f != nil {
		cu.SetIronStored(*f)
	}
	return cu
}

// AddIronStored adds f to iron_stored.
func (cu *CityUpdate) AddIronStored(f float64) *CityUpdate {
	cu.mutation.AddIronStored(f)
	return cu
}

// SetFoodStored sets the food_stored field.
func (cu *CityUpdate) SetFoodStored(f float64) *CityUpdate {
	cu.mutation.ResetFoodStored()
	cu.mutation.SetFoodStored(f)
	return cu
}

// SetNillableFoodStored sets the food_stored field if the given value is not nil.
func (cu *CityUpdate) SetNillableFoodStored(f *float64) *CityUpdate {
	if f != nil {
		cu.SetFoodStored(*f)
	}
	return cu
}

// AddFoodStored adds f to food_stored.
func (cu *CityUpdate) AddFoodStored(f float64) *CityUpdate {
	cu.mutation.AddFoodStored(f)
	return cu
}

// SetWoodLimit sets the wood_limit field.
func (cu *CityUpdate) SetWoodLimit(f float64) *CityUpdate {
	cu.mutation.ResetWoodLimit()
	cu.mutation.SetWoodLimit(f)
	return cu
}

// SetNillableWoodLimit sets the wood_limit field if the given value is not nil.
func (cu *CityUpdate) SetNillableWoodLimit(f *float64) *CityUpdate {
	if f != nil {
		cu.SetWoodLimit(*f)
	}
	return cu
}

// AddWoodLimit adds f to wood_limit.
func (cu *CityUpdate) AddWoodLimit(f float64) *CityUpdate {
	cu.mutation.AddWoodLimit(f)
	return cu
}

// SetStoneLimit sets the stone_limit field.
func (cu *CityUpdate) SetStoneLimit(f float64) *CityUpdate {
	cu.mutation.ResetStoneLimit()
	cu.mutation.SetStoneLimit(f)
	return cu
}

// SetNillableStoneLimit sets the stone_limit field if the given value is not nil.
func (cu *CityUpdate) SetNillableStoneLimit(f *float64) *CityUpdate {
	if f != nil {
		cu.SetStoneLimit(*f)
	}
	return cu
}

// AddStoneLimit adds f to stone_limit.
func (cu *CityUpdate) AddStoneLimit(f float64) *CityUpdate {
	cu.mutation.AddStoneLimit(f)
	return cu
}

// SetIronLimit sets the iron_limit field.
func (cu *CityUpdate) SetIronLimit(f float64) *CityUpdate {
	cu.mutation.ResetIronLimit()
	cu.mutation.SetIronLimit(f)
	return cu
}

// SetNillableIronLimit sets the iron_limit field if the given value is not nil.
func (cu *CityUpdate) SetNillableIronLimit(f *float64) *CityUpdate {
	if f != nil {
		cu.SetIronLimit(*f)
	}
	return cu
}

// AddIronLimit adds f to iron_limit.
func (cu *CityUpdate) AddIronLimit(f float64) *CityUpdate {
	cu.mutation.AddIronLimit(f)
	return cu
}

// SetFoodLimit sets the food_limit field.
func (cu *CityUpdate) SetFoodLimit(f float64) *CityUpdate {
	cu.mutation.ResetFoodLimit()
	cu.mutation.SetFoodLimit(f)
	return cu
}

// SetNillableFoodLimit sets the food_limit field if the given value is not nil.
func (cu *CityUpdate) SetNillableFoodLimit(f *float64) *CityUpdate {
	if f != nil {
		cu.SetFoodLimit(*f)
	}
	return cu
}

// AddFoodLimit adds f to food_limit.
func (cu *CityUpdate) AddFoodLimit(f float64) *CityUpdate {
	cu.mutation.AddFoodLimit(f)
	return cu
}

// SetQueueEndsAt sets the queue_ends_at field.
func (cu *CityUpdate) SetQueueEndsAt(t time.Time) *CityUpdate {
	cu.mutation.SetQueueEndsAt(t)
	return cu
}

// SetNillableQueueEndsAt sets the queue_ends_at field if the given value is not nil.
func (cu *CityUpdate) SetNillableQueueEndsAt(t *time.Time) *CityUpdate {
	if t != nil {
		cu.SetQueueEndsAt(*t)
	}
	return cu
}

// SetConstructionSpeed sets the construction_speed field.
func (cu *CityUpdate) SetConstructionSpeed(i int) *CityUpdate {
	cu.mutation.ResetConstructionSpeed()
	cu.mutation.SetConstructionSpeed(i)
	return cu
}

// SetNillableConstructionSpeed sets the construction_speed field if the given value is not nil.
func (cu *CityUpdate) SetNillableConstructionSpeed(i *int) *CityUpdate {
	if i != nil {
		cu.SetConstructionSpeed(*i)
	}
	return cu
}

// AddConstructionSpeed adds i to construction_speed.
func (cu *CityUpdate) AddConstructionSpeed(i int) *CityUpdate {
	cu.mutation.AddConstructionSpeed(i)
	return cu
}

// SetLastUpdated sets the last_updated field.
func (cu *CityUpdate) SetLastUpdated(t time.Time) *CityUpdate {
	cu.mutation.SetLastUpdated(t)
	return cu
}

// SetNillableLastUpdated sets the last_updated field if the given value is not nil.
func (cu *CityUpdate) SetNillableLastUpdated(t *time.Time) *CityUpdate {
	if t != nil {
		cu.SetLastUpdated(*t)
	}
	return cu
}

// SetOwnerID sets the owner edge to User by id.
func (cu *CityUpdate) SetOwnerID(id int) *CityUpdate {
	cu.mutation.SetOwnerID(id)
	return cu
}

// SetNillableOwnerID sets the owner edge to User by id if the given value is not nil.
func (cu *CityUpdate) SetNillableOwnerID(id *int) *CityUpdate {
	if id != nil {
		cu = cu.SetOwnerID(*id)
	}
	return cu
}

// SetOwner sets the owner edge to User.
func (cu *CityUpdate) SetOwner(u *User) *CityUpdate {
	return cu.SetOwnerID(u.ID)
}

// AddConstructionIDs adds the constructions edge to Construction by ids.
func (cu *CityUpdate) AddConstructionIDs(ids ...int) *CityUpdate {
	cu.mutation.AddConstructionIDs(ids...)
	return cu
}

// AddConstructions adds the constructions edges to Construction.
func (cu *CityUpdate) AddConstructions(c ...*Construction) *CityUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddConstructionIDs(ids...)
}

// AddQueueIDs adds the queue edge to QueueItem by ids.
func (cu *CityUpdate) AddQueueIDs(ids ...int) *CityUpdate {
	cu.mutation.AddQueueIDs(ids...)
	return cu
}

// AddQueue adds the queue edges to QueueItem.
func (cu *CityUpdate) AddQueue(q ...*QueueItem) *CityUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return cu.AddQueueIDs(ids...)
}

// Mutation returns the CityMutation object of the builder.
func (cu *CityUpdate) Mutation() *CityMutation {
	return cu.mutation
}

// ClearOwner clears the "owner" edge to type User.
func (cu *CityUpdate) ClearOwner() *CityUpdate {
	cu.mutation.ClearOwner()
	return cu
}

// ClearConstructions clears all "constructions" edges to type Construction.
func (cu *CityUpdate) ClearConstructions() *CityUpdate {
	cu.mutation.ClearConstructions()
	return cu
}

// RemoveConstructionIDs removes the constructions edge to Construction by ids.
func (cu *CityUpdate) RemoveConstructionIDs(ids ...int) *CityUpdate {
	cu.mutation.RemoveConstructionIDs(ids...)
	return cu
}

// RemoveConstructions removes constructions edges to Construction.
func (cu *CityUpdate) RemoveConstructions(c ...*Construction) *CityUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveConstructionIDs(ids...)
}

// ClearQueue clears all "queue" edges to type QueueItem.
func (cu *CityUpdate) ClearQueue() *CityUpdate {
	cu.mutation.ClearQueue()
	return cu
}

// RemoveQueueIDs removes the queue edge to QueueItem by ids.
func (cu *CityUpdate) RemoveQueueIDs(ids ...int) *CityUpdate {
	cu.mutation.RemoveQueueIDs(ids...)
	return cu
}

// RemoveQueue removes queue edges to QueueItem.
func (cu *CityUpdate) RemoveQueue(q ...*QueueItem) *CityUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return cu.RemoveQueueIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (cu *CityUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CityUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CityUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CityUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CityUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := city.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (cu *CityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   city.Table,
			Columns: city.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: city.FieldID,
			},
		},
	}
	if ps := cu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.X(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: city.FieldX,
		})
	}
	if value, ok := cu.mutation.AddedX(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: city.FieldX,
		})
	}
	if value, ok := cu.mutation.Y(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: city.FieldY,
		})
	}
	if value, ok := cu.mutation.AddedY(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: city.FieldY,
		})
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: city.FieldName,
		})
	}
	if value, ok := cu.mutation.Points(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: city.FieldPoints,
		})
	}
	if value, ok := cu.mutation.AddedPoints(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: city.FieldPoints,
		})
	}
	if value, ok := cu.mutation.WoodProduction(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldWoodProduction,
		})
	}
	if value, ok := cu.mutation.AddedWoodProduction(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldWoodProduction,
		})
	}
	if value, ok := cu.mutation.StoneProduction(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldStoneProduction,
		})
	}
	if value, ok := cu.mutation.AddedStoneProduction(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldStoneProduction,
		})
	}
	if value, ok := cu.mutation.IronProduction(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldIronProduction,
		})
	}
	if value, ok := cu.mutation.AddedIronProduction(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldIronProduction,
		})
	}
	if value, ok := cu.mutation.FoodProduction(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldFoodProduction,
		})
	}
	if value, ok := cu.mutation.AddedFoodProduction(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldFoodProduction,
		})
	}
	if value, ok := cu.mutation.WoodStored(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldWoodStored,
		})
	}
	if value, ok := cu.mutation.AddedWoodStored(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldWoodStored,
		})
	}
	if value, ok := cu.mutation.StoneStored(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldStoneStored,
		})
	}
	if value, ok := cu.mutation.AddedStoneStored(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldStoneStored,
		})
	}
	if value, ok := cu.mutation.IronStored(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldIronStored,
		})
	}
	if value, ok := cu.mutation.AddedIronStored(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldIronStored,
		})
	}
	if value, ok := cu.mutation.FoodStored(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldFoodStored,
		})
	}
	if value, ok := cu.mutation.AddedFoodStored(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldFoodStored,
		})
	}
	if value, ok := cu.mutation.WoodLimit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldWoodLimit,
		})
	}
	if value, ok := cu.mutation.AddedWoodLimit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldWoodLimit,
		})
	}
	if value, ok := cu.mutation.StoneLimit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldStoneLimit,
		})
	}
	if value, ok := cu.mutation.AddedStoneLimit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldStoneLimit,
		})
	}
	if value, ok := cu.mutation.IronLimit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldIronLimit,
		})
	}
	if value, ok := cu.mutation.AddedIronLimit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldIronLimit,
		})
	}
	if value, ok := cu.mutation.FoodLimit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldFoodLimit,
		})
	}
	if value, ok := cu.mutation.AddedFoodLimit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldFoodLimit,
		})
	}
	if value, ok := cu.mutation.QueueEndsAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: city.FieldQueueEndsAt,
		})
	}
	if value, ok := cu.mutation.ConstructionSpeed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: city.FieldConstructionSpeed,
		})
	}
	if value, ok := cu.mutation.AddedConstructionSpeed(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: city.FieldConstructionSpeed,
		})
	}
	if value, ok := cu.mutation.LastUpdated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: city.FieldLastUpdated,
		})
	}
	if cu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   city.OwnerTable,
			Columns: []string{city.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   city.OwnerTable,
			Columns: []string{city.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ConstructionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.ConstructionsTable,
			Columns: []string{city.ConstructionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: construction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedConstructionsIDs(); len(nodes) > 0 && !cu.mutation.ConstructionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.ConstructionsTable,
			Columns: []string{city.ConstructionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: construction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ConstructionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.ConstructionsTable,
			Columns: []string{city.ConstructionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: construction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.QueueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.QueueTable,
			Columns: []string{city.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: queueitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedQueueIDs(); len(nodes) > 0 && !cu.mutation.QueueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.QueueTable,
			Columns: []string{city.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: queueitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.QueueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.QueueTable,
			Columns: []string{city.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: queueitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{city.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CityUpdateOne is the builder for updating a single City entity.
type CityUpdateOne struct {
	config
	hooks    []Hook
	mutation *CityMutation
}

// SetX sets the x field.
func (cuo *CityUpdateOne) SetX(i int) *CityUpdateOne {
	cuo.mutation.ResetX()
	cuo.mutation.SetX(i)
	return cuo
}

// SetNillableX sets the x field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableX(i *int) *CityUpdateOne {
	if i != nil {
		cuo.SetX(*i)
	}
	return cuo
}

// AddX adds i to x.
func (cuo *CityUpdateOne) AddX(i int) *CityUpdateOne {
	cuo.mutation.AddX(i)
	return cuo
}

// SetY sets the y field.
func (cuo *CityUpdateOne) SetY(i int) *CityUpdateOne {
	cuo.mutation.ResetY()
	cuo.mutation.SetY(i)
	return cuo
}

// SetNillableY sets the y field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableY(i *int) *CityUpdateOne {
	if i != nil {
		cuo.SetY(*i)
	}
	return cuo
}

// AddY adds i to y.
func (cuo *CityUpdateOne) AddY(i int) *CityUpdateOne {
	cuo.mutation.AddY(i)
	return cuo
}

// SetName sets the name field.
func (cuo *CityUpdateOne) SetName(s string) *CityUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the name field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableName(s *string) *CityUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetPoints sets the points field.
func (cuo *CityUpdateOne) SetPoints(i int) *CityUpdateOne {
	cuo.mutation.ResetPoints()
	cuo.mutation.SetPoints(i)
	return cuo
}

// SetNillablePoints sets the points field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillablePoints(i *int) *CityUpdateOne {
	if i != nil {
		cuo.SetPoints(*i)
	}
	return cuo
}

// AddPoints adds i to points.
func (cuo *CityUpdateOne) AddPoints(i int) *CityUpdateOne {
	cuo.mutation.AddPoints(i)
	return cuo
}

// SetWoodProduction sets the wood_production field.
func (cuo *CityUpdateOne) SetWoodProduction(f float64) *CityUpdateOne {
	cuo.mutation.ResetWoodProduction()
	cuo.mutation.SetWoodProduction(f)
	return cuo
}

// SetNillableWoodProduction sets the wood_production field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableWoodProduction(f *float64) *CityUpdateOne {
	if f != nil {
		cuo.SetWoodProduction(*f)
	}
	return cuo
}

// AddWoodProduction adds f to wood_production.
func (cuo *CityUpdateOne) AddWoodProduction(f float64) *CityUpdateOne {
	cuo.mutation.AddWoodProduction(f)
	return cuo
}

// SetStoneProduction sets the stone_production field.
func (cuo *CityUpdateOne) SetStoneProduction(f float64) *CityUpdateOne {
	cuo.mutation.ResetStoneProduction()
	cuo.mutation.SetStoneProduction(f)
	return cuo
}

// SetNillableStoneProduction sets the stone_production field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableStoneProduction(f *float64) *CityUpdateOne {
	if f != nil {
		cuo.SetStoneProduction(*f)
	}
	return cuo
}

// AddStoneProduction adds f to stone_production.
func (cuo *CityUpdateOne) AddStoneProduction(f float64) *CityUpdateOne {
	cuo.mutation.AddStoneProduction(f)
	return cuo
}

// SetIronProduction sets the iron_production field.
func (cuo *CityUpdateOne) SetIronProduction(f float64) *CityUpdateOne {
	cuo.mutation.ResetIronProduction()
	cuo.mutation.SetIronProduction(f)
	return cuo
}

// SetNillableIronProduction sets the iron_production field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableIronProduction(f *float64) *CityUpdateOne {
	if f != nil {
		cuo.SetIronProduction(*f)
	}
	return cuo
}

// AddIronProduction adds f to iron_production.
func (cuo *CityUpdateOne) AddIronProduction(f float64) *CityUpdateOne {
	cuo.mutation.AddIronProduction(f)
	return cuo
}

// SetFoodProduction sets the food_production field.
func (cuo *CityUpdateOne) SetFoodProduction(f float64) *CityUpdateOne {
	cuo.mutation.ResetFoodProduction()
	cuo.mutation.SetFoodProduction(f)
	return cuo
}

// SetNillableFoodProduction sets the food_production field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableFoodProduction(f *float64) *CityUpdateOne {
	if f != nil {
		cuo.SetFoodProduction(*f)
	}
	return cuo
}

// AddFoodProduction adds f to food_production.
func (cuo *CityUpdateOne) AddFoodProduction(f float64) *CityUpdateOne {
	cuo.mutation.AddFoodProduction(f)
	return cuo
}

// SetWoodStored sets the wood_stored field.
func (cuo *CityUpdateOne) SetWoodStored(f float64) *CityUpdateOne {
	cuo.mutation.ResetWoodStored()
	cuo.mutation.SetWoodStored(f)
	return cuo
}

// SetNillableWoodStored sets the wood_stored field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableWoodStored(f *float64) *CityUpdateOne {
	if f != nil {
		cuo.SetWoodStored(*f)
	}
	return cuo
}

// AddWoodStored adds f to wood_stored.
func (cuo *CityUpdateOne) AddWoodStored(f float64) *CityUpdateOne {
	cuo.mutation.AddWoodStored(f)
	return cuo
}

// SetStoneStored sets the stone_stored field.
func (cuo *CityUpdateOne) SetStoneStored(f float64) *CityUpdateOne {
	cuo.mutation.ResetStoneStored()
	cuo.mutation.SetStoneStored(f)
	return cuo
}

// SetNillableStoneStored sets the stone_stored field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableStoneStored(f *float64) *CityUpdateOne {
	if f != nil {
		cuo.SetStoneStored(*f)
	}
	return cuo
}

// AddStoneStored adds f to stone_stored.
func (cuo *CityUpdateOne) AddStoneStored(f float64) *CityUpdateOne {
	cuo.mutation.AddStoneStored(f)
	return cuo
}

// SetIronStored sets the iron_stored field.
func (cuo *CityUpdateOne) SetIronStored(f float64) *CityUpdateOne {
	cuo.mutation.ResetIronStored()
	cuo.mutation.SetIronStored(f)
	return cuo
}

// SetNillableIronStored sets the iron_stored field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableIronStored(f *float64) *CityUpdateOne {
	if f != nil {
		cuo.SetIronStored(*f)
	}
	return cuo
}

// AddIronStored adds f to iron_stored.
func (cuo *CityUpdateOne) AddIronStored(f float64) *CityUpdateOne {
	cuo.mutation.AddIronStored(f)
	return cuo
}

// SetFoodStored sets the food_stored field.
func (cuo *CityUpdateOne) SetFoodStored(f float64) *CityUpdateOne {
	cuo.mutation.ResetFoodStored()
	cuo.mutation.SetFoodStored(f)
	return cuo
}

// SetNillableFoodStored sets the food_stored field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableFoodStored(f *float64) *CityUpdateOne {
	if f != nil {
		cuo.SetFoodStored(*f)
	}
	return cuo
}

// AddFoodStored adds f to food_stored.
func (cuo *CityUpdateOne) AddFoodStored(f float64) *CityUpdateOne {
	cuo.mutation.AddFoodStored(f)
	return cuo
}

// SetWoodLimit sets the wood_limit field.
func (cuo *CityUpdateOne) SetWoodLimit(f float64) *CityUpdateOne {
	cuo.mutation.ResetWoodLimit()
	cuo.mutation.SetWoodLimit(f)
	return cuo
}

// SetNillableWoodLimit sets the wood_limit field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableWoodLimit(f *float64) *CityUpdateOne {
	if f != nil {
		cuo.SetWoodLimit(*f)
	}
	return cuo
}

// AddWoodLimit adds f to wood_limit.
func (cuo *CityUpdateOne) AddWoodLimit(f float64) *CityUpdateOne {
	cuo.mutation.AddWoodLimit(f)
	return cuo
}

// SetStoneLimit sets the stone_limit field.
func (cuo *CityUpdateOne) SetStoneLimit(f float64) *CityUpdateOne {
	cuo.mutation.ResetStoneLimit()
	cuo.mutation.SetStoneLimit(f)
	return cuo
}

// SetNillableStoneLimit sets the stone_limit field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableStoneLimit(f *float64) *CityUpdateOne {
	if f != nil {
		cuo.SetStoneLimit(*f)
	}
	return cuo
}

// AddStoneLimit adds f to stone_limit.
func (cuo *CityUpdateOne) AddStoneLimit(f float64) *CityUpdateOne {
	cuo.mutation.AddStoneLimit(f)
	return cuo
}

// SetIronLimit sets the iron_limit field.
func (cuo *CityUpdateOne) SetIronLimit(f float64) *CityUpdateOne {
	cuo.mutation.ResetIronLimit()
	cuo.mutation.SetIronLimit(f)
	return cuo
}

// SetNillableIronLimit sets the iron_limit field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableIronLimit(f *float64) *CityUpdateOne {
	if f != nil {
		cuo.SetIronLimit(*f)
	}
	return cuo
}

// AddIronLimit adds f to iron_limit.
func (cuo *CityUpdateOne) AddIronLimit(f float64) *CityUpdateOne {
	cuo.mutation.AddIronLimit(f)
	return cuo
}

// SetFoodLimit sets the food_limit field.
func (cuo *CityUpdateOne) SetFoodLimit(f float64) *CityUpdateOne {
	cuo.mutation.ResetFoodLimit()
	cuo.mutation.SetFoodLimit(f)
	return cuo
}

// SetNillableFoodLimit sets the food_limit field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableFoodLimit(f *float64) *CityUpdateOne {
	if f != nil {
		cuo.SetFoodLimit(*f)
	}
	return cuo
}

// AddFoodLimit adds f to food_limit.
func (cuo *CityUpdateOne) AddFoodLimit(f float64) *CityUpdateOne {
	cuo.mutation.AddFoodLimit(f)
	return cuo
}

// SetQueueEndsAt sets the queue_ends_at field.
func (cuo *CityUpdateOne) SetQueueEndsAt(t time.Time) *CityUpdateOne {
	cuo.mutation.SetQueueEndsAt(t)
	return cuo
}

// SetNillableQueueEndsAt sets the queue_ends_at field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableQueueEndsAt(t *time.Time) *CityUpdateOne {
	if t != nil {
		cuo.SetQueueEndsAt(*t)
	}
	return cuo
}

// SetConstructionSpeed sets the construction_speed field.
func (cuo *CityUpdateOne) SetConstructionSpeed(i int) *CityUpdateOne {
	cuo.mutation.ResetConstructionSpeed()
	cuo.mutation.SetConstructionSpeed(i)
	return cuo
}

// SetNillableConstructionSpeed sets the construction_speed field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableConstructionSpeed(i *int) *CityUpdateOne {
	if i != nil {
		cuo.SetConstructionSpeed(*i)
	}
	return cuo
}

// AddConstructionSpeed adds i to construction_speed.
func (cuo *CityUpdateOne) AddConstructionSpeed(i int) *CityUpdateOne {
	cuo.mutation.AddConstructionSpeed(i)
	return cuo
}

// SetLastUpdated sets the last_updated field.
func (cuo *CityUpdateOne) SetLastUpdated(t time.Time) *CityUpdateOne {
	cuo.mutation.SetLastUpdated(t)
	return cuo
}

// SetNillableLastUpdated sets the last_updated field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableLastUpdated(t *time.Time) *CityUpdateOne {
	if t != nil {
		cuo.SetLastUpdated(*t)
	}
	return cuo
}

// SetOwnerID sets the owner edge to User by id.
func (cuo *CityUpdateOne) SetOwnerID(id int) *CityUpdateOne {
	cuo.mutation.SetOwnerID(id)
	return cuo
}

// SetNillableOwnerID sets the owner edge to User by id if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableOwnerID(id *int) *CityUpdateOne {
	if id != nil {
		cuo = cuo.SetOwnerID(*id)
	}
	return cuo
}

// SetOwner sets the owner edge to User.
func (cuo *CityUpdateOne) SetOwner(u *User) *CityUpdateOne {
	return cuo.SetOwnerID(u.ID)
}

// AddConstructionIDs adds the constructions edge to Construction by ids.
func (cuo *CityUpdateOne) AddConstructionIDs(ids ...int) *CityUpdateOne {
	cuo.mutation.AddConstructionIDs(ids...)
	return cuo
}

// AddConstructions adds the constructions edges to Construction.
func (cuo *CityUpdateOne) AddConstructions(c ...*Construction) *CityUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddConstructionIDs(ids...)
}

// AddQueueIDs adds the queue edge to QueueItem by ids.
func (cuo *CityUpdateOne) AddQueueIDs(ids ...int) *CityUpdateOne {
	cuo.mutation.AddQueueIDs(ids...)
	return cuo
}

// AddQueue adds the queue edges to QueueItem.
func (cuo *CityUpdateOne) AddQueue(q ...*QueueItem) *CityUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return cuo.AddQueueIDs(ids...)
}

// Mutation returns the CityMutation object of the builder.
func (cuo *CityUpdateOne) Mutation() *CityMutation {
	return cuo.mutation
}

// ClearOwner clears the "owner" edge to type User.
func (cuo *CityUpdateOne) ClearOwner() *CityUpdateOne {
	cuo.mutation.ClearOwner()
	return cuo
}

// ClearConstructions clears all "constructions" edges to type Construction.
func (cuo *CityUpdateOne) ClearConstructions() *CityUpdateOne {
	cuo.mutation.ClearConstructions()
	return cuo
}

// RemoveConstructionIDs removes the constructions edge to Construction by ids.
func (cuo *CityUpdateOne) RemoveConstructionIDs(ids ...int) *CityUpdateOne {
	cuo.mutation.RemoveConstructionIDs(ids...)
	return cuo
}

// RemoveConstructions removes constructions edges to Construction.
func (cuo *CityUpdateOne) RemoveConstructions(c ...*Construction) *CityUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveConstructionIDs(ids...)
}

// ClearQueue clears all "queue" edges to type QueueItem.
func (cuo *CityUpdateOne) ClearQueue() *CityUpdateOne {
	cuo.mutation.ClearQueue()
	return cuo
}

// RemoveQueueIDs removes the queue edge to QueueItem by ids.
func (cuo *CityUpdateOne) RemoveQueueIDs(ids ...int) *CityUpdateOne {
	cuo.mutation.RemoveQueueIDs(ids...)
	return cuo
}

// RemoveQueue removes queue edges to QueueItem.
func (cuo *CityUpdateOne) RemoveQueue(q ...*QueueItem) *CityUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return cuo.RemoveQueueIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (cuo *CityUpdateOne) Save(ctx context.Context) (*City, error) {
	var (
		err  error
		node *City
	)
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CityUpdateOne) SaveX(ctx context.Context) *City {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CityUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CityUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CityUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := city.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (cuo *CityUpdateOne) sqlSave(ctx context.Context) (_node *City, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   city.Table,
			Columns: city.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: city.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing City.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := cuo.mutation.X(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: city.FieldX,
		})
	}
	if value, ok := cuo.mutation.AddedX(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: city.FieldX,
		})
	}
	if value, ok := cuo.mutation.Y(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: city.FieldY,
		})
	}
	if value, ok := cuo.mutation.AddedY(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: city.FieldY,
		})
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: city.FieldName,
		})
	}
	if value, ok := cuo.mutation.Points(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: city.FieldPoints,
		})
	}
	if value, ok := cuo.mutation.AddedPoints(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: city.FieldPoints,
		})
	}
	if value, ok := cuo.mutation.WoodProduction(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldWoodProduction,
		})
	}
	if value, ok := cuo.mutation.AddedWoodProduction(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldWoodProduction,
		})
	}
	if value, ok := cuo.mutation.StoneProduction(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldStoneProduction,
		})
	}
	if value, ok := cuo.mutation.AddedStoneProduction(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldStoneProduction,
		})
	}
	if value, ok := cuo.mutation.IronProduction(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldIronProduction,
		})
	}
	if value, ok := cuo.mutation.AddedIronProduction(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldIronProduction,
		})
	}
	if value, ok := cuo.mutation.FoodProduction(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldFoodProduction,
		})
	}
	if value, ok := cuo.mutation.AddedFoodProduction(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldFoodProduction,
		})
	}
	if value, ok := cuo.mutation.WoodStored(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldWoodStored,
		})
	}
	if value, ok := cuo.mutation.AddedWoodStored(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldWoodStored,
		})
	}
	if value, ok := cuo.mutation.StoneStored(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldStoneStored,
		})
	}
	if value, ok := cuo.mutation.AddedStoneStored(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldStoneStored,
		})
	}
	if value, ok := cuo.mutation.IronStored(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldIronStored,
		})
	}
	if value, ok := cuo.mutation.AddedIronStored(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldIronStored,
		})
	}
	if value, ok := cuo.mutation.FoodStored(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldFoodStored,
		})
	}
	if value, ok := cuo.mutation.AddedFoodStored(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldFoodStored,
		})
	}
	if value, ok := cuo.mutation.WoodLimit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldWoodLimit,
		})
	}
	if value, ok := cuo.mutation.AddedWoodLimit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldWoodLimit,
		})
	}
	if value, ok := cuo.mutation.StoneLimit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldStoneLimit,
		})
	}
	if value, ok := cuo.mutation.AddedStoneLimit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldStoneLimit,
		})
	}
	if value, ok := cuo.mutation.IronLimit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldIronLimit,
		})
	}
	if value, ok := cuo.mutation.AddedIronLimit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldIronLimit,
		})
	}
	if value, ok := cuo.mutation.FoodLimit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldFoodLimit,
		})
	}
	if value, ok := cuo.mutation.AddedFoodLimit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: city.FieldFoodLimit,
		})
	}
	if value, ok := cuo.mutation.QueueEndsAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: city.FieldQueueEndsAt,
		})
	}
	if value, ok := cuo.mutation.ConstructionSpeed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: city.FieldConstructionSpeed,
		})
	}
	if value, ok := cuo.mutation.AddedConstructionSpeed(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: city.FieldConstructionSpeed,
		})
	}
	if value, ok := cuo.mutation.LastUpdated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: city.FieldLastUpdated,
		})
	}
	if cuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   city.OwnerTable,
			Columns: []string{city.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   city.OwnerTable,
			Columns: []string{city.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ConstructionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.ConstructionsTable,
			Columns: []string{city.ConstructionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: construction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedConstructionsIDs(); len(nodes) > 0 && !cuo.mutation.ConstructionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.ConstructionsTable,
			Columns: []string{city.ConstructionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: construction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ConstructionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.ConstructionsTable,
			Columns: []string{city.ConstructionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: construction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.QueueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.QueueTable,
			Columns: []string{city.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: queueitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedQueueIDs(); len(nodes) > 0 && !cuo.mutation.QueueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.QueueTable,
			Columns: []string{city.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: queueitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.QueueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.QueueTable,
			Columns: []string{city.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: queueitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &City{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{city.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
